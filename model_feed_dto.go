/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the FeedDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedDTO{}

// FeedDTO Информация о прайс-листе.
type FeedDTO struct {
	// Идентификатор прайс-листа.
	Id *int64 `json:"id,omitempty"`
	// Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
	Login *string `json:"login,omitempty"`
	// Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
	Name *string `json:"name,omitempty"`
	// Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
	Password *string `json:"password,omitempty"`
	// Дата загрузки прайс-листа на Маркет. Формат даты: `ДД-ММ-ГГГГ`. Параметр выводится при размещении прайс-листа на сервере Маркета. 
	UploadDate *time.Time `json:"uploadDate,omitempty"`
	// URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
	Url *string `json:"url,omitempty"`
	Content *FeedContentDTO `json:"content,omitempty"`
	Download *FeedDownloadDTO `json:"download,omitempty"`
	Placement *FeedPlacementDTO `json:"placement,omitempty"`
	Publication *FeedPublicationDTO `json:"publication,omitempty"`
}

// NewFeedDTO instantiates a new FeedDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedDTO() *FeedDTO {
	this := FeedDTO{}
	return &this
}

// NewFeedDTOWithDefaults instantiates a new FeedDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedDTOWithDefaults() *FeedDTO {
	this := FeedDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FeedDTO) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FeedDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FeedDTO) SetId(v int64) {
	o.Id = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *FeedDTO) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *FeedDTO) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *FeedDTO) SetLogin(v string) {
	o.Login = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FeedDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FeedDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FeedDTO) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *FeedDTO) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *FeedDTO) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *FeedDTO) SetPassword(v string) {
	o.Password = &v
}

// GetUploadDate returns the UploadDate field value if set, zero value otherwise.
func (o *FeedDTO) GetUploadDate() time.Time {
	if o == nil || IsNil(o.UploadDate) {
		var ret time.Time
		return ret
	}
	return *o.UploadDate
}

// GetUploadDateOk returns a tuple with the UploadDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetUploadDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UploadDate) {
		return nil, false
	}
	return o.UploadDate, true
}

// HasUploadDate returns a boolean if a field has been set.
func (o *FeedDTO) HasUploadDate() bool {
	if o != nil && !IsNil(o.UploadDate) {
		return true
	}

	return false
}

// SetUploadDate gets a reference to the given time.Time and assigns it to the UploadDate field.
func (o *FeedDTO) SetUploadDate(v time.Time) {
	o.UploadDate = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FeedDTO) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FeedDTO) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FeedDTO) SetUrl(v string) {
	o.Url = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *FeedDTO) GetContent() FeedContentDTO {
	if o == nil || IsNil(o.Content) {
		var ret FeedContentDTO
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetContentOk() (*FeedContentDTO, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *FeedDTO) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given FeedContentDTO and assigns it to the Content field.
func (o *FeedDTO) SetContent(v FeedContentDTO) {
	o.Content = &v
}

// GetDownload returns the Download field value if set, zero value otherwise.
func (o *FeedDTO) GetDownload() FeedDownloadDTO {
	if o == nil || IsNil(o.Download) {
		var ret FeedDownloadDTO
		return ret
	}
	return *o.Download
}

// GetDownloadOk returns a tuple with the Download field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetDownloadOk() (*FeedDownloadDTO, bool) {
	if o == nil || IsNil(o.Download) {
		return nil, false
	}
	return o.Download, true
}

// HasDownload returns a boolean if a field has been set.
func (o *FeedDTO) HasDownload() bool {
	if o != nil && !IsNil(o.Download) {
		return true
	}

	return false
}

// SetDownload gets a reference to the given FeedDownloadDTO and assigns it to the Download field.
func (o *FeedDTO) SetDownload(v FeedDownloadDTO) {
	o.Download = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *FeedDTO) GetPlacement() FeedPlacementDTO {
	if o == nil || IsNil(o.Placement) {
		var ret FeedPlacementDTO
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetPlacementOk() (*FeedPlacementDTO, bool) {
	if o == nil || IsNil(o.Placement) {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *FeedDTO) HasPlacement() bool {
	if o != nil && !IsNil(o.Placement) {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given FeedPlacementDTO and assigns it to the Placement field.
func (o *FeedDTO) SetPlacement(v FeedPlacementDTO) {
	o.Placement = &v
}

// GetPublication returns the Publication field value if set, zero value otherwise.
func (o *FeedDTO) GetPublication() FeedPublicationDTO {
	if o == nil || IsNil(o.Publication) {
		var ret FeedPublicationDTO
		return ret
	}
	return *o.Publication
}

// GetPublicationOk returns a tuple with the Publication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDTO) GetPublicationOk() (*FeedPublicationDTO, bool) {
	if o == nil || IsNil(o.Publication) {
		return nil, false
	}
	return o.Publication, true
}

// HasPublication returns a boolean if a field has been set.
func (o *FeedDTO) HasPublication() bool {
	if o != nil && !IsNil(o.Publication) {
		return true
	}

	return false
}

// SetPublication gets a reference to the given FeedPublicationDTO and assigns it to the Publication field.
func (o *FeedDTO) SetPublication(v FeedPublicationDTO) {
	o.Publication = &v
}

func (o FeedDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.UploadDate) {
		toSerialize["uploadDate"] = o.UploadDate
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Download) {
		toSerialize["download"] = o.Download
	}
	if !IsNil(o.Placement) {
		toSerialize["placement"] = o.Placement
	}
	if !IsNil(o.Publication) {
		toSerialize["publication"] = o.Publication
	}
	return toSerialize, nil
}

type NullableFeedDTO struct {
	value *FeedDTO
	isSet bool
}

func (v NullableFeedDTO) Get() *FeedDTO {
	return v.value
}

func (v *NullableFeedDTO) Set(val *FeedDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedDTO(val *FeedDTO) *NullableFeedDTO {
	return &NullableFeedDTO{value: val, isSet: true}
}

func (v NullableFeedDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



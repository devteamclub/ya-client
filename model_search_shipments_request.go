/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SearchShipmentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchShipmentsRequest{}

// SearchShipmentsRequest Запрос информации об отгрузках.
type SearchShipmentsRequest struct {
	// Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 
	DateFrom *string `json:"dateFrom,omitempty"`
	// Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 
	DateTo *string `json:"dateTo,omitempty"`
	// Список статусов отгрузок.
	Statuses []ShipmentStatusType `json:"statuses,omitempty"`
	// Список идентификаторов заказов из отгрузок.
	OrderIds []int64 `json:"orderIds,omitempty"`
}

// NewSearchShipmentsRequest instantiates a new SearchShipmentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchShipmentsRequest() *SearchShipmentsRequest {
	this := SearchShipmentsRequest{}
	return &this
}

// NewSearchShipmentsRequestWithDefaults instantiates a new SearchShipmentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchShipmentsRequestWithDefaults() *SearchShipmentsRequest {
	this := SearchShipmentsRequest{}
	return &this
}

// GetDateFrom returns the DateFrom field value if set, zero value otherwise.
func (o *SearchShipmentsRequest) GetDateFrom() string {
	if o == nil || IsNil(o.DateFrom) {
		var ret string
		return ret
	}
	return *o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchShipmentsRequest) GetDateFromOk() (*string, bool) {
	if o == nil || IsNil(o.DateFrom) {
		return nil, false
	}
	return o.DateFrom, true
}

// HasDateFrom returns a boolean if a field has been set.
func (o *SearchShipmentsRequest) HasDateFrom() bool {
	if o != nil && !IsNil(o.DateFrom) {
		return true
	}

	return false
}

// SetDateFrom gets a reference to the given string and assigns it to the DateFrom field.
func (o *SearchShipmentsRequest) SetDateFrom(v string) {
	o.DateFrom = &v
}

// GetDateTo returns the DateTo field value if set, zero value otherwise.
func (o *SearchShipmentsRequest) GetDateTo() string {
	if o == nil || IsNil(o.DateTo) {
		var ret string
		return ret
	}
	return *o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchShipmentsRequest) GetDateToOk() (*string, bool) {
	if o == nil || IsNil(o.DateTo) {
		return nil, false
	}
	return o.DateTo, true
}

// HasDateTo returns a boolean if a field has been set.
func (o *SearchShipmentsRequest) HasDateTo() bool {
	if o != nil && !IsNil(o.DateTo) {
		return true
	}

	return false
}

// SetDateTo gets a reference to the given string and assigns it to the DateTo field.
func (o *SearchShipmentsRequest) SetDateTo(v string) {
	o.DateTo = &v
}

// GetStatuses returns the Statuses field value if set, zero value otherwise.
func (o *SearchShipmentsRequest) GetStatuses() []ShipmentStatusType {
	if o == nil || IsNil(o.Statuses) {
		var ret []ShipmentStatusType
		return ret
	}
	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchShipmentsRequest) GetStatusesOk() ([]ShipmentStatusType, bool) {
	if o == nil || IsNil(o.Statuses) {
		return nil, false
	}
	return o.Statuses, true
}

// HasStatuses returns a boolean if a field has been set.
func (o *SearchShipmentsRequest) HasStatuses() bool {
	if o != nil && !IsNil(o.Statuses) {
		return true
	}

	return false
}

// SetStatuses gets a reference to the given []ShipmentStatusType and assigns it to the Statuses field.
func (o *SearchShipmentsRequest) SetStatuses(v []ShipmentStatusType) {
	o.Statuses = v
}

// GetOrderIds returns the OrderIds field value if set, zero value otherwise.
func (o *SearchShipmentsRequest) GetOrderIds() []int64 {
	if o == nil || IsNil(o.OrderIds) {
		var ret []int64
		return ret
	}
	return o.OrderIds
}

// GetOrderIdsOk returns a tuple with the OrderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchShipmentsRequest) GetOrderIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.OrderIds) {
		return nil, false
	}
	return o.OrderIds, true
}

// HasOrderIds returns a boolean if a field has been set.
func (o *SearchShipmentsRequest) HasOrderIds() bool {
	if o != nil && !IsNil(o.OrderIds) {
		return true
	}

	return false
}

// SetOrderIds gets a reference to the given []int64 and assigns it to the OrderIds field.
func (o *SearchShipmentsRequest) SetOrderIds(v []int64) {
	o.OrderIds = v
}

func (o SearchShipmentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchShipmentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateFrom) {
		toSerialize["dateFrom"] = o.DateFrom
	}
	if !IsNil(o.DateTo) {
		toSerialize["dateTo"] = o.DateTo
	}
	if !IsNil(o.Statuses) {
		toSerialize["statuses"] = o.Statuses
	}
	if !IsNil(o.OrderIds) {
		toSerialize["orderIds"] = o.OrderIds
	}
	return toSerialize, nil
}

type NullableSearchShipmentsRequest struct {
	value *SearchShipmentsRequest
	isSet bool
}

func (v NullableSearchShipmentsRequest) Get() *SearchShipmentsRequest {
	return v.value
}

func (v *NullableSearchShipmentsRequest) Set(val *SearchShipmentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchShipmentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchShipmentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchShipmentsRequest(val *SearchShipmentsRequest) *NullableSearchShipmentsRequest {
	return &NullableSearchShipmentsRequest{value: val, isSet: true}
}

func (v NullableSearchShipmentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchShipmentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



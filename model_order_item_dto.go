/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OrderItemDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItemDTO{}

// OrderItemDTO Список товаров в заказе.
type OrderItemDTO struct {
	// Идентификатор товара в заказе.
	Id *int64 `json:"id,omitempty"`
	// Идентификатор каталога товаров.
	FeedId *int64 `json:"feedId,omitempty"`
	//   **Ваш SKU**  Идентификатор товара в магазине. Разрешены английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Максимальная длина — 80 знаков.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields). 
	OfferId *string `json:"offerId,omitempty"`
	// Идентификатор категории, указанный в каталоге.
	FeedCategoryId *string `json:"feedCategoryId,omitempty"`
	// Название товара.
	OfferName *string `json:"offerName,omitempty"`
	// Цена товара в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidy`).  Для отделения целой части от дробной используется точка. 
	Price *float32 `json:"price,omitempty"`
	// Цена товара в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам.  Для отделения целой части от дробной используется точка. 
	BuyerPrice *float32 `json:"buyerPrice,omitempty"`
	// Стоимость товара в валюте покупателя до применения скидок.  Для отделения целой части от дробной используется точка. 
	BuyerPriceBeforeDiscount *float32 `json:"buyerPriceBeforeDiscount,omitempty"`
	// Стоимость товара в валюте магазина до применения скидок.  Для отделения целой части от дробной используется точка. 
	PriceBeforeDiscount *float32 `json:"priceBeforeDiscount,omitempty"`
	// Количество товара.
	Count *int32 `json:"count,omitempty"`
	Vat *OrderVatType `json:"vat,omitempty"`
	//   **Ваш SKU**  Идентификатор товара в магазине. Разрешены английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Максимальная длина — 80 знаков.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields). 
	ShopSku *string `json:"shopSku,omitempty"`
	// Общее вознаграждение партнеру за все скидки на товар:  * по промокодам; * по купонам; * по баллам кешбэка по подписке Яндекс Плюс; * по акциям.  Передается в валюте заказа, для отделения целой части от дробной используется точка. 
	Subsidy *float32 `json:"subsidy,omitempty"`
	// Идентификатор склада в системе партнера, на который сформирован заказ.  {% note alert %}  Параметр устарел, временно поддерживается, но не доступен для ввода и редактирования.  {% endnote %} 
	PartnerWarehouseId *string `json:"partnerWarehouseId,omitempty"`
	// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
	Promos []OrderItemPromoDTO `json:"promos,omitempty"`
	// Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе `PUT /campaigns/{campaignId}/orders/{orderId}/cis`.  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
	Instances []OrderItemInstanceDTO `json:"instances,omitempty"`
	// Информация об удалении товара из заказа. 
	Details []OrderItemDetailDTO `json:"details,omitempty"`
	// Список субсидий по типам.
	Subsidies []OrderItemSubsidyDTO `json:"subsidies,omitempty"`
	// Список необходимых маркировок товара.
	RequiredInstanceTypes []OrderItemInstanceType `json:"requiredInstanceTypes,omitempty"`
}

// NewOrderItemDTO instantiates a new OrderItemDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItemDTO() *OrderItemDTO {
	this := OrderItemDTO{}
	return &this
}

// NewOrderItemDTOWithDefaults instantiates a new OrderItemDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemDTOWithDefaults() *OrderItemDTO {
	this := OrderItemDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderItemDTO) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderItemDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *OrderItemDTO) SetId(v int64) {
	o.Id = &v
}

// GetFeedId returns the FeedId field value if set, zero value otherwise.
func (o *OrderItemDTO) GetFeedId() int64 {
	if o == nil || IsNil(o.FeedId) {
		var ret int64
		return ret
	}
	return *o.FeedId
}

// GetFeedIdOk returns a tuple with the FeedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetFeedIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FeedId) {
		return nil, false
	}
	return o.FeedId, true
}

// HasFeedId returns a boolean if a field has been set.
func (o *OrderItemDTO) HasFeedId() bool {
	if o != nil && !IsNil(o.FeedId) {
		return true
	}

	return false
}

// SetFeedId gets a reference to the given int64 and assigns it to the FeedId field.
func (o *OrderItemDTO) SetFeedId(v int64) {
	o.FeedId = &v
}

// GetOfferId returns the OfferId field value if set, zero value otherwise.
func (o *OrderItemDTO) GetOfferId() string {
	if o == nil || IsNil(o.OfferId) {
		var ret string
		return ret
	}
	return *o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetOfferIdOk() (*string, bool) {
	if o == nil || IsNil(o.OfferId) {
		return nil, false
	}
	return o.OfferId, true
}

// HasOfferId returns a boolean if a field has been set.
func (o *OrderItemDTO) HasOfferId() bool {
	if o != nil && !IsNil(o.OfferId) {
		return true
	}

	return false
}

// SetOfferId gets a reference to the given string and assigns it to the OfferId field.
func (o *OrderItemDTO) SetOfferId(v string) {
	o.OfferId = &v
}

// GetFeedCategoryId returns the FeedCategoryId field value if set, zero value otherwise.
func (o *OrderItemDTO) GetFeedCategoryId() string {
	if o == nil || IsNil(o.FeedCategoryId) {
		var ret string
		return ret
	}
	return *o.FeedCategoryId
}

// GetFeedCategoryIdOk returns a tuple with the FeedCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetFeedCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeedCategoryId) {
		return nil, false
	}
	return o.FeedCategoryId, true
}

// HasFeedCategoryId returns a boolean if a field has been set.
func (o *OrderItemDTO) HasFeedCategoryId() bool {
	if o != nil && !IsNil(o.FeedCategoryId) {
		return true
	}

	return false
}

// SetFeedCategoryId gets a reference to the given string and assigns it to the FeedCategoryId field.
func (o *OrderItemDTO) SetFeedCategoryId(v string) {
	o.FeedCategoryId = &v
}

// GetOfferName returns the OfferName field value if set, zero value otherwise.
func (o *OrderItemDTO) GetOfferName() string {
	if o == nil || IsNil(o.OfferName) {
		var ret string
		return ret
	}
	return *o.OfferName
}

// GetOfferNameOk returns a tuple with the OfferName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetOfferNameOk() (*string, bool) {
	if o == nil || IsNil(o.OfferName) {
		return nil, false
	}
	return o.OfferName, true
}

// HasOfferName returns a boolean if a field has been set.
func (o *OrderItemDTO) HasOfferName() bool {
	if o != nil && !IsNil(o.OfferName) {
		return true
	}

	return false
}

// SetOfferName gets a reference to the given string and assigns it to the OfferName field.
func (o *OrderItemDTO) SetOfferName(v string) {
	o.OfferName = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderItemDTO) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderItemDTO) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *OrderItemDTO) SetPrice(v float32) {
	o.Price = &v
}

// GetBuyerPrice returns the BuyerPrice field value if set, zero value otherwise.
func (o *OrderItemDTO) GetBuyerPrice() float32 {
	if o == nil || IsNil(o.BuyerPrice) {
		var ret float32
		return ret
	}
	return *o.BuyerPrice
}

// GetBuyerPriceOk returns a tuple with the BuyerPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetBuyerPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.BuyerPrice) {
		return nil, false
	}
	return o.BuyerPrice, true
}

// HasBuyerPrice returns a boolean if a field has been set.
func (o *OrderItemDTO) HasBuyerPrice() bool {
	if o != nil && !IsNil(o.BuyerPrice) {
		return true
	}

	return false
}

// SetBuyerPrice gets a reference to the given float32 and assigns it to the BuyerPrice field.
func (o *OrderItemDTO) SetBuyerPrice(v float32) {
	o.BuyerPrice = &v
}

// GetBuyerPriceBeforeDiscount returns the BuyerPriceBeforeDiscount field value if set, zero value otherwise.
func (o *OrderItemDTO) GetBuyerPriceBeforeDiscount() float32 {
	if o == nil || IsNil(o.BuyerPriceBeforeDiscount) {
		var ret float32
		return ret
	}
	return *o.BuyerPriceBeforeDiscount
}

// GetBuyerPriceBeforeDiscountOk returns a tuple with the BuyerPriceBeforeDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetBuyerPriceBeforeDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.BuyerPriceBeforeDiscount) {
		return nil, false
	}
	return o.BuyerPriceBeforeDiscount, true
}

// HasBuyerPriceBeforeDiscount returns a boolean if a field has been set.
func (o *OrderItemDTO) HasBuyerPriceBeforeDiscount() bool {
	if o != nil && !IsNil(o.BuyerPriceBeforeDiscount) {
		return true
	}

	return false
}

// SetBuyerPriceBeforeDiscount gets a reference to the given float32 and assigns it to the BuyerPriceBeforeDiscount field.
func (o *OrderItemDTO) SetBuyerPriceBeforeDiscount(v float32) {
	o.BuyerPriceBeforeDiscount = &v
}

// GetPriceBeforeDiscount returns the PriceBeforeDiscount field value if set, zero value otherwise.
func (o *OrderItemDTO) GetPriceBeforeDiscount() float32 {
	if o == nil || IsNil(o.PriceBeforeDiscount) {
		var ret float32
		return ret
	}
	return *o.PriceBeforeDiscount
}

// GetPriceBeforeDiscountOk returns a tuple with the PriceBeforeDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetPriceBeforeDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceBeforeDiscount) {
		return nil, false
	}
	return o.PriceBeforeDiscount, true
}

// HasPriceBeforeDiscount returns a boolean if a field has been set.
func (o *OrderItemDTO) HasPriceBeforeDiscount() bool {
	if o != nil && !IsNil(o.PriceBeforeDiscount) {
		return true
	}

	return false
}

// SetPriceBeforeDiscount gets a reference to the given float32 and assigns it to the PriceBeforeDiscount field.
func (o *OrderItemDTO) SetPriceBeforeDiscount(v float32) {
	o.PriceBeforeDiscount = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *OrderItemDTO) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *OrderItemDTO) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *OrderItemDTO) SetCount(v int32) {
	o.Count = &v
}

// GetVat returns the Vat field value if set, zero value otherwise.
func (o *OrderItemDTO) GetVat() OrderVatType {
	if o == nil || IsNil(o.Vat) {
		var ret OrderVatType
		return ret
	}
	return *o.Vat
}

// GetVatOk returns a tuple with the Vat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetVatOk() (*OrderVatType, bool) {
	if o == nil || IsNil(o.Vat) {
		return nil, false
	}
	return o.Vat, true
}

// HasVat returns a boolean if a field has been set.
func (o *OrderItemDTO) HasVat() bool {
	if o != nil && !IsNil(o.Vat) {
		return true
	}

	return false
}

// SetVat gets a reference to the given OrderVatType and assigns it to the Vat field.
func (o *OrderItemDTO) SetVat(v OrderVatType) {
	o.Vat = &v
}

// GetShopSku returns the ShopSku field value if set, zero value otherwise.
func (o *OrderItemDTO) GetShopSku() string {
	if o == nil || IsNil(o.ShopSku) {
		var ret string
		return ret
	}
	return *o.ShopSku
}

// GetShopSkuOk returns a tuple with the ShopSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetShopSkuOk() (*string, bool) {
	if o == nil || IsNil(o.ShopSku) {
		return nil, false
	}
	return o.ShopSku, true
}

// HasShopSku returns a boolean if a field has been set.
func (o *OrderItemDTO) HasShopSku() bool {
	if o != nil && !IsNil(o.ShopSku) {
		return true
	}

	return false
}

// SetShopSku gets a reference to the given string and assigns it to the ShopSku field.
func (o *OrderItemDTO) SetShopSku(v string) {
	o.ShopSku = &v
}

// GetSubsidy returns the Subsidy field value if set, zero value otherwise.
func (o *OrderItemDTO) GetSubsidy() float32 {
	if o == nil || IsNil(o.Subsidy) {
		var ret float32
		return ret
	}
	return *o.Subsidy
}

// GetSubsidyOk returns a tuple with the Subsidy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetSubsidyOk() (*float32, bool) {
	if o == nil || IsNil(o.Subsidy) {
		return nil, false
	}
	return o.Subsidy, true
}

// HasSubsidy returns a boolean if a field has been set.
func (o *OrderItemDTO) HasSubsidy() bool {
	if o != nil && !IsNil(o.Subsidy) {
		return true
	}

	return false
}

// SetSubsidy gets a reference to the given float32 and assigns it to the Subsidy field.
func (o *OrderItemDTO) SetSubsidy(v float32) {
	o.Subsidy = &v
}

// GetPartnerWarehouseId returns the PartnerWarehouseId field value if set, zero value otherwise.
func (o *OrderItemDTO) GetPartnerWarehouseId() string {
	if o == nil || IsNil(o.PartnerWarehouseId) {
		var ret string
		return ret
	}
	return *o.PartnerWarehouseId
}

// GetPartnerWarehouseIdOk returns a tuple with the PartnerWarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetPartnerWarehouseIdOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerWarehouseId) {
		return nil, false
	}
	return o.PartnerWarehouseId, true
}

// HasPartnerWarehouseId returns a boolean if a field has been set.
func (o *OrderItemDTO) HasPartnerWarehouseId() bool {
	if o != nil && !IsNil(o.PartnerWarehouseId) {
		return true
	}

	return false
}

// SetPartnerWarehouseId gets a reference to the given string and assigns it to the PartnerWarehouseId field.
func (o *OrderItemDTO) SetPartnerWarehouseId(v string) {
	o.PartnerWarehouseId = &v
}

// GetPromos returns the Promos field value if set, zero value otherwise.
func (o *OrderItemDTO) GetPromos() []OrderItemPromoDTO {
	if o == nil || IsNil(o.Promos) {
		var ret []OrderItemPromoDTO
		return ret
	}
	return o.Promos
}

// GetPromosOk returns a tuple with the Promos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetPromosOk() ([]OrderItemPromoDTO, bool) {
	if o == nil || IsNil(o.Promos) {
		return nil, false
	}
	return o.Promos, true
}

// HasPromos returns a boolean if a field has been set.
func (o *OrderItemDTO) HasPromos() bool {
	if o != nil && !IsNil(o.Promos) {
		return true
	}

	return false
}

// SetPromos gets a reference to the given []OrderItemPromoDTO and assigns it to the Promos field.
func (o *OrderItemDTO) SetPromos(v []OrderItemPromoDTO) {
	o.Promos = v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *OrderItemDTO) GetInstances() []OrderItemInstanceDTO {
	if o == nil || IsNil(o.Instances) {
		var ret []OrderItemInstanceDTO
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetInstancesOk() ([]OrderItemInstanceDTO, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *OrderItemDTO) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []OrderItemInstanceDTO and assigns it to the Instances field.
func (o *OrderItemDTO) SetInstances(v []OrderItemInstanceDTO) {
	o.Instances = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *OrderItemDTO) GetDetails() []OrderItemDetailDTO {
	if o == nil || IsNil(o.Details) {
		var ret []OrderItemDetailDTO
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetDetailsOk() ([]OrderItemDetailDTO, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *OrderItemDTO) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []OrderItemDetailDTO and assigns it to the Details field.
func (o *OrderItemDTO) SetDetails(v []OrderItemDetailDTO) {
	o.Details = v
}

// GetSubsidies returns the Subsidies field value if set, zero value otherwise.
func (o *OrderItemDTO) GetSubsidies() []OrderItemSubsidyDTO {
	if o == nil || IsNil(o.Subsidies) {
		var ret []OrderItemSubsidyDTO
		return ret
	}
	return o.Subsidies
}

// GetSubsidiesOk returns a tuple with the Subsidies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetSubsidiesOk() ([]OrderItemSubsidyDTO, bool) {
	if o == nil || IsNil(o.Subsidies) {
		return nil, false
	}
	return o.Subsidies, true
}

// HasSubsidies returns a boolean if a field has been set.
func (o *OrderItemDTO) HasSubsidies() bool {
	if o != nil && !IsNil(o.Subsidies) {
		return true
	}

	return false
}

// SetSubsidies gets a reference to the given []OrderItemSubsidyDTO and assigns it to the Subsidies field.
func (o *OrderItemDTO) SetSubsidies(v []OrderItemSubsidyDTO) {
	o.Subsidies = v
}

// GetRequiredInstanceTypes returns the RequiredInstanceTypes field value if set, zero value otherwise.
func (o *OrderItemDTO) GetRequiredInstanceTypes() []OrderItemInstanceType {
	if o == nil || IsNil(o.RequiredInstanceTypes) {
		var ret []OrderItemInstanceType
		return ret
	}
	return o.RequiredInstanceTypes
}

// GetRequiredInstanceTypesOk returns a tuple with the RequiredInstanceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemDTO) GetRequiredInstanceTypesOk() ([]OrderItemInstanceType, bool) {
	if o == nil || IsNil(o.RequiredInstanceTypes) {
		return nil, false
	}
	return o.RequiredInstanceTypes, true
}

// HasRequiredInstanceTypes returns a boolean if a field has been set.
func (o *OrderItemDTO) HasRequiredInstanceTypes() bool {
	if o != nil && !IsNil(o.RequiredInstanceTypes) {
		return true
	}

	return false
}

// SetRequiredInstanceTypes gets a reference to the given []OrderItemInstanceType and assigns it to the RequiredInstanceTypes field.
func (o *OrderItemDTO) SetRequiredInstanceTypes(v []OrderItemInstanceType) {
	o.RequiredInstanceTypes = v
}

func (o OrderItemDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItemDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FeedId) {
		toSerialize["feedId"] = o.FeedId
	}
	if !IsNil(o.OfferId) {
		toSerialize["offerId"] = o.OfferId
	}
	if !IsNil(o.FeedCategoryId) {
		toSerialize["feedCategoryId"] = o.FeedCategoryId
	}
	if !IsNil(o.OfferName) {
		toSerialize["offerName"] = o.OfferName
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.BuyerPrice) {
		toSerialize["buyerPrice"] = o.BuyerPrice
	}
	if !IsNil(o.BuyerPriceBeforeDiscount) {
		toSerialize["buyerPriceBeforeDiscount"] = o.BuyerPriceBeforeDiscount
	}
	if !IsNil(o.PriceBeforeDiscount) {
		toSerialize["priceBeforeDiscount"] = o.PriceBeforeDiscount
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Vat) {
		toSerialize["vat"] = o.Vat
	}
	if !IsNil(o.ShopSku) {
		toSerialize["shopSku"] = o.ShopSku
	}
	if !IsNil(o.Subsidy) {
		toSerialize["subsidy"] = o.Subsidy
	}
	if !IsNil(o.PartnerWarehouseId) {
		toSerialize["partnerWarehouseId"] = o.PartnerWarehouseId
	}
	if !IsNil(o.Promos) {
		toSerialize["promos"] = o.Promos
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Subsidies) {
		toSerialize["subsidies"] = o.Subsidies
	}
	if !IsNil(o.RequiredInstanceTypes) {
		toSerialize["requiredInstanceTypes"] = o.RequiredInstanceTypes
	}
	return toSerialize, nil
}

type NullableOrderItemDTO struct {
	value *OrderItemDTO
	isSet bool
}

func (v NullableOrderItemDTO) Get() *OrderItemDTO {
	return v.value
}

func (v *NullableOrderItemDTO) Set(val *OrderItemDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItemDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItemDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItemDTO(val *OrderItemDTO) *NullableOrderItemDTO {
	return &NullableOrderItemDTO{value: val, isSet: true}
}

func (v NullableOrderItemDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItemDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



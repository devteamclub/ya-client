/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
)

// checks if the FeedbackGradesDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedbackGradesDTO{}

// FeedbackGradesDTO Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
type FeedbackGradesDTO struct {
	// Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).
	Average *float32 `json:"average,omitempty"`
	// Количество пользователей, считающих отзыв полезным.
	AgreeCount *int64 `json:"agreeCount,omitempty"`
	// Количество пользователей, считающих отзыв бесполезным.
	RejectCount *int64 `json:"rejectCount,omitempty"`
	// Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
	Factors []FeedbackFactorDTO `json:"factors,omitempty"`
}

// NewFeedbackGradesDTO instantiates a new FeedbackGradesDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackGradesDTO() *FeedbackGradesDTO {
	this := FeedbackGradesDTO{}
	return &this
}

// NewFeedbackGradesDTOWithDefaults instantiates a new FeedbackGradesDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackGradesDTOWithDefaults() *FeedbackGradesDTO {
	this := FeedbackGradesDTO{}
	return &this
}

// GetAverage returns the Average field value if set, zero value otherwise.
func (o *FeedbackGradesDTO) GetAverage() float32 {
	if o == nil || IsNil(o.Average) {
		var ret float32
		return ret
	}
	return *o.Average
}

// GetAverageOk returns a tuple with the Average field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackGradesDTO) GetAverageOk() (*float32, bool) {
	if o == nil || IsNil(o.Average) {
		return nil, false
	}
	return o.Average, true
}

// HasAverage returns a boolean if a field has been set.
func (o *FeedbackGradesDTO) HasAverage() bool {
	if o != nil && !IsNil(o.Average) {
		return true
	}

	return false
}

// SetAverage gets a reference to the given float32 and assigns it to the Average field.
func (o *FeedbackGradesDTO) SetAverage(v float32) {
	o.Average = &v
}

// GetAgreeCount returns the AgreeCount field value if set, zero value otherwise.
func (o *FeedbackGradesDTO) GetAgreeCount() int64 {
	if o == nil || IsNil(o.AgreeCount) {
		var ret int64
		return ret
	}
	return *o.AgreeCount
}

// GetAgreeCountOk returns a tuple with the AgreeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackGradesDTO) GetAgreeCountOk() (*int64, bool) {
	if o == nil || IsNil(o.AgreeCount) {
		return nil, false
	}
	return o.AgreeCount, true
}

// HasAgreeCount returns a boolean if a field has been set.
func (o *FeedbackGradesDTO) HasAgreeCount() bool {
	if o != nil && !IsNil(o.AgreeCount) {
		return true
	}

	return false
}

// SetAgreeCount gets a reference to the given int64 and assigns it to the AgreeCount field.
func (o *FeedbackGradesDTO) SetAgreeCount(v int64) {
	o.AgreeCount = &v
}

// GetRejectCount returns the RejectCount field value if set, zero value otherwise.
func (o *FeedbackGradesDTO) GetRejectCount() int64 {
	if o == nil || IsNil(o.RejectCount) {
		var ret int64
		return ret
	}
	return *o.RejectCount
}

// GetRejectCountOk returns a tuple with the RejectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackGradesDTO) GetRejectCountOk() (*int64, bool) {
	if o == nil || IsNil(o.RejectCount) {
		return nil, false
	}
	return o.RejectCount, true
}

// HasRejectCount returns a boolean if a field has been set.
func (o *FeedbackGradesDTO) HasRejectCount() bool {
	if o != nil && !IsNil(o.RejectCount) {
		return true
	}

	return false
}

// SetRejectCount gets a reference to the given int64 and assigns it to the RejectCount field.
func (o *FeedbackGradesDTO) SetRejectCount(v int64) {
	o.RejectCount = &v
}

// GetFactors returns the Factors field value if set, zero value otherwise.
func (o *FeedbackGradesDTO) GetFactors() []FeedbackFactorDTO {
	if o == nil || IsNil(o.Factors) {
		var ret []FeedbackFactorDTO
		return ret
	}
	return o.Factors
}

// GetFactorsOk returns a tuple with the Factors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackGradesDTO) GetFactorsOk() ([]FeedbackFactorDTO, bool) {
	if o == nil || IsNil(o.Factors) {
		return nil, false
	}
	return o.Factors, true
}

// HasFactors returns a boolean if a field has been set.
func (o *FeedbackGradesDTO) HasFactors() bool {
	if o != nil && !IsNil(o.Factors) {
		return true
	}

	return false
}

// SetFactors gets a reference to the given []FeedbackFactorDTO and assigns it to the Factors field.
func (o *FeedbackGradesDTO) SetFactors(v []FeedbackFactorDTO) {
	o.Factors = v
}

func (o FeedbackGradesDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedbackGradesDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Average) {
		toSerialize["average"] = o.Average
	}
	if !IsNil(o.AgreeCount) {
		toSerialize["agreeCount"] = o.AgreeCount
	}
	if !IsNil(o.RejectCount) {
		toSerialize["rejectCount"] = o.RejectCount
	}
	if !IsNil(o.Factors) {
		toSerialize["factors"] = o.Factors
	}
	return toSerialize, nil
}

type NullableFeedbackGradesDTO struct {
	value *FeedbackGradesDTO
	isSet bool
}

func (v NullableFeedbackGradesDTO) Get() *FeedbackGradesDTO {
	return v.value
}

func (v *NullableFeedbackGradesDTO) Set(val *FeedbackGradesDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackGradesDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackGradesDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackGradesDTO(val *FeedbackGradesDTO) *NullableFeedbackGradesDTO {
	return &NullableFeedbackGradesDTO{value: val, isSet: true}
}

func (v NullableFeedbackGradesDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackGradesDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



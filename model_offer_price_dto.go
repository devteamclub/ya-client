/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OfferPriceDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferPriceDTO{}

// OfferPriceDTO Товар с информацией о новой цене на него.
type OfferPriceDTO struct {
	//   **Ваш SKU**  Идентификатор товара в магазине. Разрешены английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Максимальная длина — 80 знаков.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields). 
	OfferId *string `json:"offerId,omitempty"`
	// {% note alert \"Это поле устарело\" %}  Не используйте его — это может привести к ошибкам.  {% endnote %}  Идентификатор предложения из прайс-листа. 
	// Deprecated
	Id *string `json:"id,omitempty"`
	Feed *OfferPriceFeedDTO `json:"feed,omitempty"`
	Price *PriceDTO `json:"price,omitempty"`
	// SKU на Маркете.
	MarketSku *int64 `json:"marketSku,omitempty"`
	//   **Ваш SKU**  Идентификатор товара в магазине. Разрешены английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Максимальная длина — 80 знаков.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields). 
	ShopSku *string `json:"shopSku,omitempty"`
}

// NewOfferPriceDTO instantiates a new OfferPriceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferPriceDTO() *OfferPriceDTO {
	this := OfferPriceDTO{}
	return &this
}

// NewOfferPriceDTOWithDefaults instantiates a new OfferPriceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferPriceDTOWithDefaults() *OfferPriceDTO {
	this := OfferPriceDTO{}
	return &this
}

// GetOfferId returns the OfferId field value if set, zero value otherwise.
func (o *OfferPriceDTO) GetOfferId() string {
	if o == nil || IsNil(o.OfferId) {
		var ret string
		return ret
	}
	return *o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferPriceDTO) GetOfferIdOk() (*string, bool) {
	if o == nil || IsNil(o.OfferId) {
		return nil, false
	}
	return o.OfferId, true
}

// HasOfferId returns a boolean if a field has been set.
func (o *OfferPriceDTO) HasOfferId() bool {
	if o != nil && !IsNil(o.OfferId) {
		return true
	}

	return false
}

// SetOfferId gets a reference to the given string and assigns it to the OfferId field.
func (o *OfferPriceDTO) SetOfferId(v string) {
	o.OfferId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
// Deprecated
func (o *OfferPriceDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *OfferPriceDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OfferPriceDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
// Deprecated
func (o *OfferPriceDTO) SetId(v string) {
	o.Id = &v
}

// GetFeed returns the Feed field value if set, zero value otherwise.
func (o *OfferPriceDTO) GetFeed() OfferPriceFeedDTO {
	if o == nil || IsNil(o.Feed) {
		var ret OfferPriceFeedDTO
		return ret
	}
	return *o.Feed
}

// GetFeedOk returns a tuple with the Feed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferPriceDTO) GetFeedOk() (*OfferPriceFeedDTO, bool) {
	if o == nil || IsNil(o.Feed) {
		return nil, false
	}
	return o.Feed, true
}

// HasFeed returns a boolean if a field has been set.
func (o *OfferPriceDTO) HasFeed() bool {
	if o != nil && !IsNil(o.Feed) {
		return true
	}

	return false
}

// SetFeed gets a reference to the given OfferPriceFeedDTO and assigns it to the Feed field.
func (o *OfferPriceDTO) SetFeed(v OfferPriceFeedDTO) {
	o.Feed = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OfferPriceDTO) GetPrice() PriceDTO {
	if o == nil || IsNil(o.Price) {
		var ret PriceDTO
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferPriceDTO) GetPriceOk() (*PriceDTO, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OfferPriceDTO) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given PriceDTO and assigns it to the Price field.
func (o *OfferPriceDTO) SetPrice(v PriceDTO) {
	o.Price = &v
}

// GetMarketSku returns the MarketSku field value if set, zero value otherwise.
func (o *OfferPriceDTO) GetMarketSku() int64 {
	if o == nil || IsNil(o.MarketSku) {
		var ret int64
		return ret
	}
	return *o.MarketSku
}

// GetMarketSkuOk returns a tuple with the MarketSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferPriceDTO) GetMarketSkuOk() (*int64, bool) {
	if o == nil || IsNil(o.MarketSku) {
		return nil, false
	}
	return o.MarketSku, true
}

// HasMarketSku returns a boolean if a field has been set.
func (o *OfferPriceDTO) HasMarketSku() bool {
	if o != nil && !IsNil(o.MarketSku) {
		return true
	}

	return false
}

// SetMarketSku gets a reference to the given int64 and assigns it to the MarketSku field.
func (o *OfferPriceDTO) SetMarketSku(v int64) {
	o.MarketSku = &v
}

// GetShopSku returns the ShopSku field value if set, zero value otherwise.
func (o *OfferPriceDTO) GetShopSku() string {
	if o == nil || IsNil(o.ShopSku) {
		var ret string
		return ret
	}
	return *o.ShopSku
}

// GetShopSkuOk returns a tuple with the ShopSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferPriceDTO) GetShopSkuOk() (*string, bool) {
	if o == nil || IsNil(o.ShopSku) {
		return nil, false
	}
	return o.ShopSku, true
}

// HasShopSku returns a boolean if a field has been set.
func (o *OfferPriceDTO) HasShopSku() bool {
	if o != nil && !IsNil(o.ShopSku) {
		return true
	}

	return false
}

// SetShopSku gets a reference to the given string and assigns it to the ShopSku field.
func (o *OfferPriceDTO) SetShopSku(v string) {
	o.ShopSku = &v
}

func (o OfferPriceDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferPriceDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OfferId) {
		toSerialize["offerId"] = o.OfferId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Feed) {
		toSerialize["feed"] = o.Feed
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.MarketSku) {
		toSerialize["marketSku"] = o.MarketSku
	}
	if !IsNil(o.ShopSku) {
		toSerialize["shopSku"] = o.ShopSku
	}
	return toSerialize, nil
}

type NullableOfferPriceDTO struct {
	value *OfferPriceDTO
	isSet bool
}

func (v NullableOfferPriceDTO) Get() *OfferPriceDTO {
	return v.value
}

func (v *NullableOfferPriceDTO) Set(val *OfferPriceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferPriceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferPriceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferPriceDTO(val *OfferPriceDTO) *NullableOfferPriceDTO {
	return &NullableOfferPriceDTO{value: val, isSet: true}
}

func (v NullableOfferPriceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferPriceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



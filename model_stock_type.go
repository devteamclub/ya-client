/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
	"fmt"
)

// StockType Этот параметр пока не используется — всегда передавайте значение `FIT`.  * `FIT` — значение, которое нужно передавать всегда. * `ACTUAL` — значение, которое пока не используется. 
type StockType string

// List of StockType
const (
	FIT StockType = "FIT"
	ACTUAL StockType = "ACTUAL"
)

// All allowed values of StockType enum
var AllowedStockTypeEnumValues = []StockType{
	"FIT",
	"ACTUAL",
}

func (v *StockType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StockType(value)
	for _, existing := range AllowedStockTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StockType", value)
}

// NewStockTypeFromValue returns a pointer to a valid StockType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStockTypeFromValue(v string) (*StockType, error) {
	ev := StockType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StockType: valid values are %v", v, AllowedStockTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StockType) IsValid() bool {
	for _, existing := range AllowedStockTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StockType value
func (v StockType) Ptr() *StockType {
	return &v
}

type NullableStockType struct {
	value *StockType
	isSet bool
}

func (v NullableStockType) Get() *StockType {
	return v.value
}

func (v *NullableStockType) Set(val *StockType) {
	v.value = val
	v.isSet = true
}

func (v NullableStockType) IsSet() bool {
	return v.isSet
}

func (v *NullableStockType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockType(val *StockType) *NullableStockType {
	return &NullableStockType{value: val, isSet: true}
}

func (v NullableStockType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


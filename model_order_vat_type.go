/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// OrderVatType Ставка налога на добавленную стоимость (НДС) на услугу доставки заказа:  * `NO_VAT` — НДС не облагается, используется только для отдельных видов услуг.  * `VAT_0` — НДС 0%. Например, используется при продаже товаров, вывезенных в таможенной процедуре экспорта, или при оказании услуг по международной перевозке товаров.  * `VAT_10_110` — НДС 10/110. Расчетная ставка НДС 10%, применяется только для случая предоплаты.  * `VAT_20_120` — НДС 20/120. Расчетная ставка НДС 20%, применяется только для случая предоплаты.  * `VAT_18_118` — НДС 18/118. Ставка использовалась до 1 января 2019 года.  Используется только совместно с параметром `payment-method=YANDEX`. 
type OrderVatType string

// List of OrderVatType
const (
	VAT_18 OrderVatType = "VAT_18"
	VAT_10 OrderVatType = "VAT_10"
	VAT_18_118 OrderVatType = "VAT_18_118"
	VAT_10_110 OrderVatType = "VAT_10_110"
	VAT_0 OrderVatType = "VAT_0"
	NO_VAT OrderVatType = "NO_VAT"
	VAT_20 OrderVatType = "VAT_20"
	VAT_20_120 OrderVatType = "VAT_20_120"
	UNKNOWN_VALUE OrderVatType = "UNKNOWN_VALUE"
)

// All allowed values of OrderVatType enum
var AllowedOrderVatTypeEnumValues = []OrderVatType{
	"VAT_18",
	"VAT_10",
	"VAT_18_118",
	"VAT_10_110",
	"VAT_0",
	"NO_VAT",
	"VAT_20",
	"VAT_20_120",
	"UNKNOWN_VALUE",
}

func (v *OrderVatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderVatType(value)
	for _, existing := range AllowedOrderVatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderVatType", value)
}

// NewOrderVatTypeFromValue returns a pointer to a valid OrderVatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderVatTypeFromValue(v string) (*OrderVatType, error) {
	ev := OrderVatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderVatType: valid values are %v", v, AllowedOrderVatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderVatType) IsValid() bool {
	for _, existing := range AllowedOrderVatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderVatType value
func (v OrderVatType) Ptr() *OrderVatType {
	return &v
}

type NullableOrderVatType struct {
	value *OrderVatType
	isSet bool
}

func (v NullableOrderVatType) Get() *OrderVatType {
	return v.value
}

func (v *NullableOrderVatType) Set(val *OrderVatType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderVatType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderVatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderVatType(val *OrderVatType) *NullableOrderVatType {
	return &NullableOrderVatType{value: val, isSet: true}
}

func (v NullableOrderVatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderVatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


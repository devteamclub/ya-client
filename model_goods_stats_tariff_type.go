/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// GoodsStatsTariffType Услуга Маркета, за которую начисляется тариф:  * `AGENCY_COMMISSION` — прием платежа покупателя.  * `PAYMENT_TRANSFER` — перевод платежа покупателя.  * `FULFILLMENT` — обработка товара на складе Маркета.  * `STORAGE` — хранение товара на складе Маркета в течение суток.  * `SURPLUS` — хранение излишков на складе Маркета.  * `WITHDRAW` — вывоз товара со склада Маркета.  * `FEE` — размещение товара на Маркете.  Все тарифы описаны [в Справке для продавцов](https://yandex.ru/support/marketplace/introduction/rates/index.html). 
type GoodsStatsTariffType string

// List of GoodsStatsTariffType
const (
	AGENCY_COMMISSION GoodsStatsTariffType = "AGENCY_COMMISSION"
	PAYMENT_TRANSFER GoodsStatsTariffType = "PAYMENT_TRANSFER"
	FULFILLMENT GoodsStatsTariffType = "FULFILLMENT"
	STORAGE GoodsStatsTariffType = "STORAGE"
	WITHDRAW GoodsStatsTariffType = "WITHDRAW"
	SURPLUS GoodsStatsTariffType = "SURPLUS"
	FEE GoodsStatsTariffType = "FEE"
)

// All allowed values of GoodsStatsTariffType enum
var AllowedGoodsStatsTariffTypeEnumValues = []GoodsStatsTariffType{
	"AGENCY_COMMISSION",
	"PAYMENT_TRANSFER",
	"FULFILLMENT",
	"STORAGE",
	"WITHDRAW",
	"SURPLUS",
	"FEE",
}

func (v *GoodsStatsTariffType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GoodsStatsTariffType(value)
	for _, existing := range AllowedGoodsStatsTariffTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GoodsStatsTariffType", value)
}

// NewGoodsStatsTariffTypeFromValue returns a pointer to a valid GoodsStatsTariffType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGoodsStatsTariffTypeFromValue(v string) (*GoodsStatsTariffType, error) {
	ev := GoodsStatsTariffType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GoodsStatsTariffType: valid values are %v", v, AllowedGoodsStatsTariffTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GoodsStatsTariffType) IsValid() bool {
	for _, existing := range AllowedGoodsStatsTariffTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GoodsStatsTariffType value
func (v GoodsStatsTariffType) Ptr() *GoodsStatsTariffType {
	return &v
}

type NullableGoodsStatsTariffType struct {
	value *GoodsStatsTariffType
	isSet bool
}

func (v NullableGoodsStatsTariffType) Get() *GoodsStatsTariffType {
	return v.value
}

func (v *NullableGoodsStatsTariffType) Set(val *GoodsStatsTariffType) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodsStatsTariffType) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodsStatsTariffType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodsStatsTariffType(val *GoodsStatsTariffType) *NullableGoodsStatsTariffType {
	return &NullableGoodsStatsTariffType{value: val, isSet: true}
}

func (v NullableGoodsStatsTariffType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodsStatsTariffType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


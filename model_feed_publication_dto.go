/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FeedPublicationDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedPublicationDTO{}

// FeedPublicationDTO Информация о последней публикации предложений из прайс-листа на Маркете.
type FeedPublicationDTO struct {
	Status *FeedStatusType `json:"status,omitempty"`
	Full *FeedPublicationFullDTO `json:"full,omitempty"`
	PriceAndStockUpdate *FeedPublicationPriceAndStockUpdateDTO `json:"priceAndStockUpdate,omitempty"`
}

// NewFeedPublicationDTO instantiates a new FeedPublicationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedPublicationDTO() *FeedPublicationDTO {
	this := FeedPublicationDTO{}
	return &this
}

// NewFeedPublicationDTOWithDefaults instantiates a new FeedPublicationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedPublicationDTOWithDefaults() *FeedPublicationDTO {
	this := FeedPublicationDTO{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FeedPublicationDTO) GetStatus() FeedStatusType {
	if o == nil || IsNil(o.Status) {
		var ret FeedStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedPublicationDTO) GetStatusOk() (*FeedStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FeedPublicationDTO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given FeedStatusType and assigns it to the Status field.
func (o *FeedPublicationDTO) SetStatus(v FeedStatusType) {
	o.Status = &v
}

// GetFull returns the Full field value if set, zero value otherwise.
func (o *FeedPublicationDTO) GetFull() FeedPublicationFullDTO {
	if o == nil || IsNil(o.Full) {
		var ret FeedPublicationFullDTO
		return ret
	}
	return *o.Full
}

// GetFullOk returns a tuple with the Full field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedPublicationDTO) GetFullOk() (*FeedPublicationFullDTO, bool) {
	if o == nil || IsNil(o.Full) {
		return nil, false
	}
	return o.Full, true
}

// HasFull returns a boolean if a field has been set.
func (o *FeedPublicationDTO) HasFull() bool {
	if o != nil && !IsNil(o.Full) {
		return true
	}

	return false
}

// SetFull gets a reference to the given FeedPublicationFullDTO and assigns it to the Full field.
func (o *FeedPublicationDTO) SetFull(v FeedPublicationFullDTO) {
	o.Full = &v
}

// GetPriceAndStockUpdate returns the PriceAndStockUpdate field value if set, zero value otherwise.
func (o *FeedPublicationDTO) GetPriceAndStockUpdate() FeedPublicationPriceAndStockUpdateDTO {
	if o == nil || IsNil(o.PriceAndStockUpdate) {
		var ret FeedPublicationPriceAndStockUpdateDTO
		return ret
	}
	return *o.PriceAndStockUpdate
}

// GetPriceAndStockUpdateOk returns a tuple with the PriceAndStockUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedPublicationDTO) GetPriceAndStockUpdateOk() (*FeedPublicationPriceAndStockUpdateDTO, bool) {
	if o == nil || IsNil(o.PriceAndStockUpdate) {
		return nil, false
	}
	return o.PriceAndStockUpdate, true
}

// HasPriceAndStockUpdate returns a boolean if a field has been set.
func (o *FeedPublicationDTO) HasPriceAndStockUpdate() bool {
	if o != nil && !IsNil(o.PriceAndStockUpdate) {
		return true
	}

	return false
}

// SetPriceAndStockUpdate gets a reference to the given FeedPublicationPriceAndStockUpdateDTO and assigns it to the PriceAndStockUpdate field.
func (o *FeedPublicationDTO) SetPriceAndStockUpdate(v FeedPublicationPriceAndStockUpdateDTO) {
	o.PriceAndStockUpdate = &v
}

func (o FeedPublicationDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedPublicationDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Full) {
		toSerialize["full"] = o.Full
	}
	if !IsNil(o.PriceAndStockUpdate) {
		toSerialize["priceAndStockUpdate"] = o.PriceAndStockUpdate
	}
	return toSerialize, nil
}

type NullableFeedPublicationDTO struct {
	value *FeedPublicationDTO
	isSet bool
}

func (v NullableFeedPublicationDTO) Get() *FeedPublicationDTO {
	return v.value
}

func (v *NullableFeedPublicationDTO) Set(val *FeedPublicationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedPublicationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedPublicationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedPublicationDTO(val *FeedPublicationDTO) *NullableFeedPublicationDTO {
	return &NullableFeedPublicationDTO{value: val, isSet: true}
}

func (v NullableFeedPublicationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedPublicationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



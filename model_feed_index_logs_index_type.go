/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
	"fmt"
)

// FeedIndexLogsIndexType Тип обновления.  Возможные значения: * `DIFF` — частичное обновление данных на Яндекс Маркете (например, обновление цен ранее опубликованных предложений и публикация новых). * `FAST_PRICE` — только обновление цен ранее опубликованных предложений. * `FULL` — полное обновление данных на Яндекс Маркете. 
type FeedIndexLogsIndexType string

// List of FeedIndexLogsIndexType
const (
	DIFF FeedIndexLogsIndexType = "DIFF"
	FAST_PRICE FeedIndexLogsIndexType = "FAST_PRICE"
	FULL FeedIndexLogsIndexType = "FULL"
)

// All allowed values of FeedIndexLogsIndexType enum
var AllowedFeedIndexLogsIndexTypeEnumValues = []FeedIndexLogsIndexType{
	"DIFF",
	"FAST_PRICE",
	"FULL",
}

func (v *FeedIndexLogsIndexType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeedIndexLogsIndexType(value)
	for _, existing := range AllowedFeedIndexLogsIndexTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeedIndexLogsIndexType", value)
}

// NewFeedIndexLogsIndexTypeFromValue returns a pointer to a valid FeedIndexLogsIndexType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeedIndexLogsIndexTypeFromValue(v string) (*FeedIndexLogsIndexType, error) {
	ev := FeedIndexLogsIndexType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeedIndexLogsIndexType: valid values are %v", v, AllowedFeedIndexLogsIndexTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeedIndexLogsIndexType) IsValid() bool {
	for _, existing := range AllowedFeedIndexLogsIndexTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeedIndexLogsIndexType value
func (v FeedIndexLogsIndexType) Ptr() *FeedIndexLogsIndexType {
	return &v
}

type NullableFeedIndexLogsIndexType struct {
	value *FeedIndexLogsIndexType
	isSet bool
}

func (v NullableFeedIndexLogsIndexType) Get() *FeedIndexLogsIndexType {
	return v.value
}

func (v *NullableFeedIndexLogsIndexType) Set(val *FeedIndexLogsIndexType) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedIndexLogsIndexType) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedIndexLogsIndexType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedIndexLogsIndexType(val *FeedIndexLogsIndexType) *NullableFeedIndexLogsIndexType {
	return &NullableFeedIndexLogsIndexType{value: val, isSet: true}
}

func (v NullableFeedIndexLogsIndexType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedIndexLogsIndexType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


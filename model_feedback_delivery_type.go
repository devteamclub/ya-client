/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
	"fmt"
)

// FeedbackDeliveryType Способ покупки, указанный в отзыве:  * `DELIVERY` — доставка. * `PICKUP` — самовывоз. * `INSTORE` — в магазине. 
type FeedbackDeliveryType string

// List of FeedbackDeliveryType
const (
	DELIVERY FeedbackDeliveryType = "DELIVERY"
	PICKUP FeedbackDeliveryType = "PICKUP"
	INSTORE FeedbackDeliveryType = "INSTORE"
)

// All allowed values of FeedbackDeliveryType enum
var AllowedFeedbackDeliveryTypeEnumValues = []FeedbackDeliveryType{
	"DELIVERY",
	"PICKUP",
	"INSTORE",
}

func (v *FeedbackDeliveryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeedbackDeliveryType(value)
	for _, existing := range AllowedFeedbackDeliveryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeedbackDeliveryType", value)
}

// NewFeedbackDeliveryTypeFromValue returns a pointer to a valid FeedbackDeliveryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeedbackDeliveryTypeFromValue(v string) (*FeedbackDeliveryType, error) {
	ev := FeedbackDeliveryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeedbackDeliveryType: valid values are %v", v, AllowedFeedbackDeliveryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeedbackDeliveryType) IsValid() bool {
	for _, existing := range AllowedFeedbackDeliveryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeedbackDeliveryType value
func (v FeedbackDeliveryType) Ptr() *FeedbackDeliveryType {
	return &v
}

type NullableFeedbackDeliveryType struct {
	value *FeedbackDeliveryType
	isSet bool
}

func (v NullableFeedbackDeliveryType) Get() *FeedbackDeliveryType {
	return v.value
}

func (v *NullableFeedbackDeliveryType) Set(val *FeedbackDeliveryType) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackDeliveryType) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackDeliveryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackDeliveryType(val *FeedbackDeliveryType) *NullableFeedbackDeliveryType {
	return &NullableFeedbackDeliveryType{value: val, isSet: true}
}

func (v NullableFeedbackDeliveryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackDeliveryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


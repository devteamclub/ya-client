/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
	"fmt"
)

// checks if the ConfirmShipmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfirmShipmentRequest{}

// ConfirmShipmentRequest Запрос для подтверждения отгрузки.
type ConfirmShipmentRequest struct {
	// Идентификатор отгрузки в системе поставщика.
	ExternalShipmentId *string `json:"externalShipmentId,omitempty"`
	// Список идентификаторов заказов в отгрузке.
	OrderIds []int64 `json:"orderIds"`
}

type _ConfirmShipmentRequest ConfirmShipmentRequest

// NewConfirmShipmentRequest instantiates a new ConfirmShipmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfirmShipmentRequest(orderIds []int64) *ConfirmShipmentRequest {
	this := ConfirmShipmentRequest{}
	this.OrderIds = orderIds
	return &this
}

// NewConfirmShipmentRequestWithDefaults instantiates a new ConfirmShipmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfirmShipmentRequestWithDefaults() *ConfirmShipmentRequest {
	this := ConfirmShipmentRequest{}
	return &this
}

// GetExternalShipmentId returns the ExternalShipmentId field value if set, zero value otherwise.
func (o *ConfirmShipmentRequest) GetExternalShipmentId() string {
	if o == nil || IsNil(o.ExternalShipmentId) {
		var ret string
		return ret
	}
	return *o.ExternalShipmentId
}

// GetExternalShipmentIdOk returns a tuple with the ExternalShipmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfirmShipmentRequest) GetExternalShipmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalShipmentId) {
		return nil, false
	}
	return o.ExternalShipmentId, true
}

// HasExternalShipmentId returns a boolean if a field has been set.
func (o *ConfirmShipmentRequest) HasExternalShipmentId() bool {
	if o != nil && !IsNil(o.ExternalShipmentId) {
		return true
	}

	return false
}

// SetExternalShipmentId gets a reference to the given string and assigns it to the ExternalShipmentId field.
func (o *ConfirmShipmentRequest) SetExternalShipmentId(v string) {
	o.ExternalShipmentId = &v
}

// GetOrderIds returns the OrderIds field value
func (o *ConfirmShipmentRequest) GetOrderIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.OrderIds
}

// GetOrderIdsOk returns a tuple with the OrderIds field value
// and a boolean to check if the value has been set.
func (o *ConfirmShipmentRequest) GetOrderIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrderIds, true
}

// SetOrderIds sets field value
func (o *ConfirmShipmentRequest) SetOrderIds(v []int64) {
	o.OrderIds = v
}

func (o ConfirmShipmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfirmShipmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalShipmentId) {
		toSerialize["externalShipmentId"] = o.ExternalShipmentId
	}
	toSerialize["orderIds"] = o.OrderIds
	return toSerialize, nil
}

func (o *ConfirmShipmentRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orderIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfirmShipmentRequest := _ConfirmShipmentRequest{}

	err = json.Unmarshal(bytes, &varConfirmShipmentRequest)

	if err != nil {
		return err
	}

	*o = ConfirmShipmentRequest(varConfirmShipmentRequest)

	return err
}

type NullableConfirmShipmentRequest struct {
	value *ConfirmShipmentRequest
	isSet bool
}

func (v NullableConfirmShipmentRequest) Get() *ConfirmShipmentRequest {
	return v.value
}

func (v *NullableConfirmShipmentRequest) Set(val *ConfirmShipmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConfirmShipmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConfirmShipmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfirmShipmentRequest(val *ConfirmShipmentRequest) *NullableConfirmShipmentRequest {
	return &NullableConfirmShipmentRequest{value: val, isSet: true}
}

func (v NullableConfirmShipmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfirmShipmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



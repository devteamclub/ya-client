/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
)

// checks if the FeedDownloadDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedDownloadDTO{}

// FeedDownloadDTO Информация о последней загрузке прайс-листа.
type FeedDownloadDTO struct {
	Status *FeedStatusType `json:"status,omitempty"`
	Error *FeedDownloadErrorDTO `json:"error,omitempty"`
}

// NewFeedDownloadDTO instantiates a new FeedDownloadDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedDownloadDTO() *FeedDownloadDTO {
	this := FeedDownloadDTO{}
	return &this
}

// NewFeedDownloadDTOWithDefaults instantiates a new FeedDownloadDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedDownloadDTOWithDefaults() *FeedDownloadDTO {
	this := FeedDownloadDTO{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FeedDownloadDTO) GetStatus() FeedStatusType {
	if o == nil || IsNil(o.Status) {
		var ret FeedStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDownloadDTO) GetStatusOk() (*FeedStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FeedDownloadDTO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given FeedStatusType and assigns it to the Status field.
func (o *FeedDownloadDTO) SetStatus(v FeedStatusType) {
	o.Status = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *FeedDownloadDTO) GetError() FeedDownloadErrorDTO {
	if o == nil || IsNil(o.Error) {
		var ret FeedDownloadErrorDTO
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedDownloadDTO) GetErrorOk() (*FeedDownloadErrorDTO, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *FeedDownloadDTO) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given FeedDownloadErrorDTO and assigns it to the Error field.
func (o *FeedDownloadDTO) SetError(v FeedDownloadErrorDTO) {
	o.Error = &v
}

func (o FeedDownloadDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedDownloadDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableFeedDownloadDTO struct {
	value *FeedDownloadDTO
	isSet bool
}

func (v NullableFeedDownloadDTO) Get() *FeedDownloadDTO {
	return v.value
}

func (v *NullableFeedDownloadDTO) Set(val *FeedDownloadDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedDownloadDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedDownloadDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedDownloadDTO(val *FeedDownloadDTO) *NullableFeedDownloadDTO {
	return &NullableFeedDownloadDTO{value: val, isSet: true}
}

func (v NullableFeedDownloadDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedDownloadDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



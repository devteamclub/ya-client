/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
	"fmt"
)

// checks if the ParcelDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParcelDTO{}

// ParcelDTO Информация о грузовых местах в заказе.
type ParcelDTO struct {
	// Список грузовых мест. Маркет определяет количество мест по длине этого списка.
	Boxes []ParcelBoxDTO `json:"boxes"`
}

type _ParcelDTO ParcelDTO

// NewParcelDTO instantiates a new ParcelDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParcelDTO(boxes []ParcelBoxDTO) *ParcelDTO {
	this := ParcelDTO{}
	this.Boxes = boxes
	return &this
}

// NewParcelDTOWithDefaults instantiates a new ParcelDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParcelDTOWithDefaults() *ParcelDTO {
	this := ParcelDTO{}
	return &this
}

// GetBoxes returns the Boxes field value
func (o *ParcelDTO) GetBoxes() []ParcelBoxDTO {
	if o == nil {
		var ret []ParcelBoxDTO
		return ret
	}

	return o.Boxes
}

// GetBoxesOk returns a tuple with the Boxes field value
// and a boolean to check if the value has been set.
func (o *ParcelDTO) GetBoxesOk() ([]ParcelBoxDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Boxes, true
}

// SetBoxes sets field value
func (o *ParcelDTO) SetBoxes(v []ParcelBoxDTO) {
	o.Boxes = v
}

func (o ParcelDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParcelDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["boxes"] = o.Boxes
	return toSerialize, nil
}

func (o *ParcelDTO) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"boxes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParcelDTO := _ParcelDTO{}

	err = json.Unmarshal(bytes, &varParcelDTO)

	if err != nil {
		return err
	}

	*o = ParcelDTO(varParcelDTO)

	return err
}

type NullableParcelDTO struct {
	value *ParcelDTO
	isSet bool
}

func (v NullableParcelDTO) Get() *ParcelDTO {
	return v.value
}

func (v *NullableParcelDTO) Set(val *ParcelDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableParcelDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableParcelDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParcelDTO(val *ParcelDTO) *NullableParcelDTO {
	return &NullableParcelDTO{value: val, isSet: true}
}

func (v NullableParcelDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParcelDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
)

// checks if the BriefOrderItemInstanceDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BriefOrderItemInstanceDTO{}

// BriefOrderItemInstanceDTO Идентификатор единицы товара.  Заполните только одно поле в зависимости от того, в какой системе маркирован товар.  Подробно о работе с маркируемыми товарами рассказано [в Справке](https://yandex.ru/support/marketplace/orders/cz.html). 
type BriefOrderItemInstanceDTO struct {
	// Код «Честного знака» для единицы товара.  {% note warning %}  Не экранируйте косую черту в коде символа-разделителя `\\u001d`!  ✅ `01030410947874432155Qbag!\\u001d93Zjqw`  ❌ `01030410947874432155Qbag!\\\\u001d93Zjqw`  Косые черты и кавычки в других местах экранируйте по правилам JSON: `\\\\` и `\\\"`  {% endnote %} 
	Cis *string `json:"cis,omitempty"`
	// Уникальный идентификационный номер ювелирного изделия.  Представляет собой число из 16 цифр. 
	Uin *string `json:"uin,omitempty"`
	// Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. 
	Rnpt *string `json:"rnpt,omitempty"`
	// Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. 
	Gtd *string `json:"gtd,omitempty"`
}

// NewBriefOrderItemInstanceDTO instantiates a new BriefOrderItemInstanceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBriefOrderItemInstanceDTO() *BriefOrderItemInstanceDTO {
	this := BriefOrderItemInstanceDTO{}
	return &this
}

// NewBriefOrderItemInstanceDTOWithDefaults instantiates a new BriefOrderItemInstanceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBriefOrderItemInstanceDTOWithDefaults() *BriefOrderItemInstanceDTO {
	this := BriefOrderItemInstanceDTO{}
	return &this
}

// GetCis returns the Cis field value if set, zero value otherwise.
func (o *BriefOrderItemInstanceDTO) GetCis() string {
	if o == nil || IsNil(o.Cis) {
		var ret string
		return ret
	}
	return *o.Cis
}

// GetCisOk returns a tuple with the Cis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemInstanceDTO) GetCisOk() (*string, bool) {
	if o == nil || IsNil(o.Cis) {
		return nil, false
	}
	return o.Cis, true
}

// HasCis returns a boolean if a field has been set.
func (o *BriefOrderItemInstanceDTO) HasCis() bool {
	if o != nil && !IsNil(o.Cis) {
		return true
	}

	return false
}

// SetCis gets a reference to the given string and assigns it to the Cis field.
func (o *BriefOrderItemInstanceDTO) SetCis(v string) {
	o.Cis = &v
}

// GetUin returns the Uin field value if set, zero value otherwise.
func (o *BriefOrderItemInstanceDTO) GetUin() string {
	if o == nil || IsNil(o.Uin) {
		var ret string
		return ret
	}
	return *o.Uin
}

// GetUinOk returns a tuple with the Uin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemInstanceDTO) GetUinOk() (*string, bool) {
	if o == nil || IsNil(o.Uin) {
		return nil, false
	}
	return o.Uin, true
}

// HasUin returns a boolean if a field has been set.
func (o *BriefOrderItemInstanceDTO) HasUin() bool {
	if o != nil && !IsNil(o.Uin) {
		return true
	}

	return false
}

// SetUin gets a reference to the given string and assigns it to the Uin field.
func (o *BriefOrderItemInstanceDTO) SetUin(v string) {
	o.Uin = &v
}

// GetRnpt returns the Rnpt field value if set, zero value otherwise.
func (o *BriefOrderItemInstanceDTO) GetRnpt() string {
	if o == nil || IsNil(o.Rnpt) {
		var ret string
		return ret
	}
	return *o.Rnpt
}

// GetRnptOk returns a tuple with the Rnpt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemInstanceDTO) GetRnptOk() (*string, bool) {
	if o == nil || IsNil(o.Rnpt) {
		return nil, false
	}
	return o.Rnpt, true
}

// HasRnpt returns a boolean if a field has been set.
func (o *BriefOrderItemInstanceDTO) HasRnpt() bool {
	if o != nil && !IsNil(o.Rnpt) {
		return true
	}

	return false
}

// SetRnpt gets a reference to the given string and assigns it to the Rnpt field.
func (o *BriefOrderItemInstanceDTO) SetRnpt(v string) {
	o.Rnpt = &v
}

// GetGtd returns the Gtd field value if set, zero value otherwise.
func (o *BriefOrderItemInstanceDTO) GetGtd() string {
	if o == nil || IsNil(o.Gtd) {
		var ret string
		return ret
	}
	return *o.Gtd
}

// GetGtdOk returns a tuple with the Gtd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BriefOrderItemInstanceDTO) GetGtdOk() (*string, bool) {
	if o == nil || IsNil(o.Gtd) {
		return nil, false
	}
	return o.Gtd, true
}

// HasGtd returns a boolean if a field has been set.
func (o *BriefOrderItemInstanceDTO) HasGtd() bool {
	if o != nil && !IsNil(o.Gtd) {
		return true
	}

	return false
}

// SetGtd gets a reference to the given string and assigns it to the Gtd field.
func (o *BriefOrderItemInstanceDTO) SetGtd(v string) {
	o.Gtd = &v
}

func (o BriefOrderItemInstanceDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BriefOrderItemInstanceDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cis) {
		toSerialize["cis"] = o.Cis
	}
	if !IsNil(o.Uin) {
		toSerialize["uin"] = o.Uin
	}
	if !IsNil(o.Rnpt) {
		toSerialize["rnpt"] = o.Rnpt
	}
	if !IsNil(o.Gtd) {
		toSerialize["gtd"] = o.Gtd
	}
	return toSerialize, nil
}

type NullableBriefOrderItemInstanceDTO struct {
	value *BriefOrderItemInstanceDTO
	isSet bool
}

func (v NullableBriefOrderItemInstanceDTO) Get() *BriefOrderItemInstanceDTO {
	return v.value
}

func (v *NullableBriefOrderItemInstanceDTO) Set(val *BriefOrderItemInstanceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableBriefOrderItemInstanceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableBriefOrderItemInstanceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBriefOrderItemInstanceDTO(val *BriefOrderItemInstanceDTO) *NullableBriefOrderItemInstanceDTO {
	return &NullableBriefOrderItemInstanceDTO{value: val, isSet: true}
}

func (v NullableBriefOrderItemInstanceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBriefOrderItemInstanceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



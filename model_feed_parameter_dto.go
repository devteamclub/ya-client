/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
	"fmt"
)

// checks if the FeedParameterDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedParameterDTO{}

// FeedParameterDTO Параметр прайс-листа.
type FeedParameterDTO struct {
	// Удалить ли значение параметра.  Возможное значение: * `true` — удалить значение параметра.  Используется вместе с параметром `name`. 
	Deleted *bool `json:"deleted,omitempty"`
	// Название параметра.  Возможное значение: - `reparseIntervalMinutes` — период скачивания прайс-листа. Маркет будет скачивать прайс-лист через количество минут, указанное в параметре `value`. Например, при `value=1440`, Маркет будет скачивать прайс-лист один раз в сутки.  {% note alert %}  Несмотря на установленное значение, Маркет скачает прайс-лист один раз в сутки.  {% endnote %}  Обязательный параметр. 
	Name string `json:"name"`
	// Значения параметра.  Используется вместе с параметром `name`. 
	Values []int32 `json:"values,omitempty"`
}

type _FeedParameterDTO FeedParameterDTO

// NewFeedParameterDTO instantiates a new FeedParameterDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedParameterDTO(name string) *FeedParameterDTO {
	this := FeedParameterDTO{}
	this.Name = name
	return &this
}

// NewFeedParameterDTOWithDefaults instantiates a new FeedParameterDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedParameterDTOWithDefaults() *FeedParameterDTO {
	this := FeedParameterDTO{}
	return &this
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *FeedParameterDTO) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedParameterDTO) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *FeedParameterDTO) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *FeedParameterDTO) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetName returns the Name field value
func (o *FeedParameterDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeedParameterDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeedParameterDTO) SetName(v string) {
	o.Name = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *FeedParameterDTO) GetValues() []int32 {
	if o == nil || IsNil(o.Values) {
		var ret []int32
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedParameterDTO) GetValuesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *FeedParameterDTO) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []int32 and assigns it to the Values field.
func (o *FeedParameterDTO) SetValues(v []int32) {
	o.Values = v
}

func (o FeedParameterDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedParameterDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

func (o *FeedParameterDTO) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeedParameterDTO := _FeedParameterDTO{}

	err = json.Unmarshal(bytes, &varFeedParameterDTO)

	if err != nil {
		return err
	}

	*o = FeedParameterDTO(varFeedParameterDTO)

	return err
}

type NullableFeedParameterDTO struct {
	value *FeedParameterDTO
	isSet bool
}

func (v NullableFeedParameterDTO) Get() *FeedParameterDTO {
	return v.value
}

func (v *NullableFeedParameterDTO) Set(val *FeedParameterDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedParameterDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedParameterDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedParameterDTO(val *FeedParameterDTO) *NullableFeedParameterDTO {
	return &NullableFeedParameterDTO{value: val, isSet: true}
}

func (v NullableFeedParameterDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedParameterDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// PageFormatType Параметр управляет размещением ярлыков на странице: * `A7` — в PDF-файле будут странички размером A7, на каждой из которых разместится один ярлык. * `A4` — PDF-файл будет состоять из страниц A4, на каждой из которых будет по восемь ярлыков. 
type PageFormatType string

// List of PageFormatType
const (
	A7 PageFormatType = "A7"
	A4 PageFormatType = "A4"
)

// All allowed values of PageFormatType enum
var AllowedPageFormatTypeEnumValues = []PageFormatType{
	"A7",
	"A4",
}

func (v *PageFormatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PageFormatType(value)
	for _, existing := range AllowedPageFormatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PageFormatType", value)
}

// NewPageFormatTypeFromValue returns a pointer to a valid PageFormatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPageFormatTypeFromValue(v string) (*PageFormatType, error) {
	ev := PageFormatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PageFormatType: valid values are %v", v, AllowedPageFormatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PageFormatType) IsValid() bool {
	for _, existing := range AllowedPageFormatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PageFormatType value
func (v PageFormatType) Ptr() *PageFormatType {
	return &v
}

type NullablePageFormatType struct {
	value *PageFormatType
	isSet bool
}

func (v NullablePageFormatType) Get() *PageFormatType {
	return v.value
}

func (v *NullablePageFormatType) Set(val *PageFormatType) {
	v.value = val
	v.isSet = true
}

func (v NullablePageFormatType) IsSet() bool {
	return v.isSet
}

func (v *NullablePageFormatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageFormatType(val *PageFormatType) *NullablePageFormatType {
	return &NullablePageFormatType{value: val, isSet: true}
}

func (v NullablePageFormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageFormatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
	"fmt"
)

// checks if the OfferDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferDTO{}

// OfferDTO Предложение.
type OfferDTO struct {
	// Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
	Price *float32 `json:"price,omitempty"`
	// Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
	FeedId *int64 `json:"feedId,omitempty"`
	// Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
	Id *string `json:"id,omitempty"`
	// Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
	ShopCategoryId *string `json:"shopCategoryId,omitempty"`
	// Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
	MarketCategoryId *int32 `json:"marketCategoryId,omitempty"`
	// Цена предложения без скидки.
	PreDiscountPrice *float32 `json:"preDiscountPrice,omitempty"`
	// Скидка на предложение, в %.
	Discount *int32 `json:"discount,omitempty"`
	// Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
	CutPrice *bool `json:"cutPrice,omitempty"`
	// URL-адрес предложения на сайте магазина.
	Url *string `json:"url,omitempty"`
	// Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %} 
	ModelId int64 `json:"modelId"`
	// Наименование предложения.
	Name *string `json:"name,omitempty"`
	Currency *CurrencyType `json:"currency,omitempty"`
	// Ставка на клик. deprecated.
	Bid *float32 `json:"bid,omitempty"`
	// Ставка на клик. deprecated.
	Cbid *float32 `json:"cbid,omitempty"`
	// Процент комиссии на товар при продаже по CPA. deprecated.
	Fee *float32 `json:"fee,omitempty"`
	// Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
	Blocked *bool `json:"blocked,omitempty"`
}

type _OfferDTO OfferDTO

// NewOfferDTO instantiates a new OfferDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferDTO(modelId int64) *OfferDTO {
	this := OfferDTO{}
	this.ModelId = modelId
	return &this
}

// NewOfferDTOWithDefaults instantiates a new OfferDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferDTOWithDefaults() *OfferDTO {
	this := OfferDTO{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OfferDTO) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OfferDTO) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *OfferDTO) SetPrice(v float32) {
	o.Price = &v
}

// GetFeedId returns the FeedId field value if set, zero value otherwise.
func (o *OfferDTO) GetFeedId() int64 {
	if o == nil || IsNil(o.FeedId) {
		var ret int64
		return ret
	}
	return *o.FeedId
}

// GetFeedIdOk returns a tuple with the FeedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetFeedIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FeedId) {
		return nil, false
	}
	return o.FeedId, true
}

// HasFeedId returns a boolean if a field has been set.
func (o *OfferDTO) HasFeedId() bool {
	if o != nil && !IsNil(o.FeedId) {
		return true
	}

	return false
}

// SetFeedId gets a reference to the given int64 and assigns it to the FeedId field.
func (o *OfferDTO) SetFeedId(v int64) {
	o.FeedId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OfferDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OfferDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OfferDTO) SetId(v string) {
	o.Id = &v
}

// GetShopCategoryId returns the ShopCategoryId field value if set, zero value otherwise.
func (o *OfferDTO) GetShopCategoryId() string {
	if o == nil || IsNil(o.ShopCategoryId) {
		var ret string
		return ret
	}
	return *o.ShopCategoryId
}

// GetShopCategoryIdOk returns a tuple with the ShopCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetShopCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.ShopCategoryId) {
		return nil, false
	}
	return o.ShopCategoryId, true
}

// HasShopCategoryId returns a boolean if a field has been set.
func (o *OfferDTO) HasShopCategoryId() bool {
	if o != nil && !IsNil(o.ShopCategoryId) {
		return true
	}

	return false
}

// SetShopCategoryId gets a reference to the given string and assigns it to the ShopCategoryId field.
func (o *OfferDTO) SetShopCategoryId(v string) {
	o.ShopCategoryId = &v
}

// GetMarketCategoryId returns the MarketCategoryId field value if set, zero value otherwise.
func (o *OfferDTO) GetMarketCategoryId() int32 {
	if o == nil || IsNil(o.MarketCategoryId) {
		var ret int32
		return ret
	}
	return *o.MarketCategoryId
}

// GetMarketCategoryIdOk returns a tuple with the MarketCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetMarketCategoryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MarketCategoryId) {
		return nil, false
	}
	return o.MarketCategoryId, true
}

// HasMarketCategoryId returns a boolean if a field has been set.
func (o *OfferDTO) HasMarketCategoryId() bool {
	if o != nil && !IsNil(o.MarketCategoryId) {
		return true
	}

	return false
}

// SetMarketCategoryId gets a reference to the given int32 and assigns it to the MarketCategoryId field.
func (o *OfferDTO) SetMarketCategoryId(v int32) {
	o.MarketCategoryId = &v
}

// GetPreDiscountPrice returns the PreDiscountPrice field value if set, zero value otherwise.
func (o *OfferDTO) GetPreDiscountPrice() float32 {
	if o == nil || IsNil(o.PreDiscountPrice) {
		var ret float32
		return ret
	}
	return *o.PreDiscountPrice
}

// GetPreDiscountPriceOk returns a tuple with the PreDiscountPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetPreDiscountPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.PreDiscountPrice) {
		return nil, false
	}
	return o.PreDiscountPrice, true
}

// HasPreDiscountPrice returns a boolean if a field has been set.
func (o *OfferDTO) HasPreDiscountPrice() bool {
	if o != nil && !IsNil(o.PreDiscountPrice) {
		return true
	}

	return false
}

// SetPreDiscountPrice gets a reference to the given float32 and assigns it to the PreDiscountPrice field.
func (o *OfferDTO) SetPreDiscountPrice(v float32) {
	o.PreDiscountPrice = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *OfferDTO) GetDiscount() int32 {
	if o == nil || IsNil(o.Discount) {
		var ret int32
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetDiscountOk() (*int32, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *OfferDTO) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given int32 and assigns it to the Discount field.
func (o *OfferDTO) SetDiscount(v int32) {
	o.Discount = &v
}

// GetCutPrice returns the CutPrice field value if set, zero value otherwise.
func (o *OfferDTO) GetCutPrice() bool {
	if o == nil || IsNil(o.CutPrice) {
		var ret bool
		return ret
	}
	return *o.CutPrice
}

// GetCutPriceOk returns a tuple with the CutPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetCutPriceOk() (*bool, bool) {
	if o == nil || IsNil(o.CutPrice) {
		return nil, false
	}
	return o.CutPrice, true
}

// HasCutPrice returns a boolean if a field has been set.
func (o *OfferDTO) HasCutPrice() bool {
	if o != nil && !IsNil(o.CutPrice) {
		return true
	}

	return false
}

// SetCutPrice gets a reference to the given bool and assigns it to the CutPrice field.
func (o *OfferDTO) SetCutPrice(v bool) {
	o.CutPrice = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OfferDTO) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OfferDTO) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OfferDTO) SetUrl(v string) {
	o.Url = &v
}

// GetModelId returns the ModelId field value
func (o *OfferDTO) GetModelId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ModelId
}

// GetModelIdOk returns a tuple with the ModelId field value
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetModelIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelId, true
}

// SetModelId sets field value
func (o *OfferDTO) SetModelId(v int64) {
	o.ModelId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OfferDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OfferDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OfferDTO) SetName(v string) {
	o.Name = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *OfferDTO) GetCurrency() CurrencyType {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyType
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetCurrencyOk() (*CurrencyType, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *OfferDTO) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyType and assigns it to the Currency field.
func (o *OfferDTO) SetCurrency(v CurrencyType) {
	o.Currency = &v
}

// GetBid returns the Bid field value if set, zero value otherwise.
func (o *OfferDTO) GetBid() float32 {
	if o == nil || IsNil(o.Bid) {
		var ret float32
		return ret
	}
	return *o.Bid
}

// GetBidOk returns a tuple with the Bid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetBidOk() (*float32, bool) {
	if o == nil || IsNil(o.Bid) {
		return nil, false
	}
	return o.Bid, true
}

// HasBid returns a boolean if a field has been set.
func (o *OfferDTO) HasBid() bool {
	if o != nil && !IsNil(o.Bid) {
		return true
	}

	return false
}

// SetBid gets a reference to the given float32 and assigns it to the Bid field.
func (o *OfferDTO) SetBid(v float32) {
	o.Bid = &v
}

// GetCbid returns the Cbid field value if set, zero value otherwise.
func (o *OfferDTO) GetCbid() float32 {
	if o == nil || IsNil(o.Cbid) {
		var ret float32
		return ret
	}
	return *o.Cbid
}

// GetCbidOk returns a tuple with the Cbid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetCbidOk() (*float32, bool) {
	if o == nil || IsNil(o.Cbid) {
		return nil, false
	}
	return o.Cbid, true
}

// HasCbid returns a boolean if a field has been set.
func (o *OfferDTO) HasCbid() bool {
	if o != nil && !IsNil(o.Cbid) {
		return true
	}

	return false
}

// SetCbid gets a reference to the given float32 and assigns it to the Cbid field.
func (o *OfferDTO) SetCbid(v float32) {
	o.Cbid = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *OfferDTO) GetFee() float32 {
	if o == nil || IsNil(o.Fee) {
		var ret float32
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetFeeOk() (*float32, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *OfferDTO) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given float32 and assigns it to the Fee field.
func (o *OfferDTO) SetFee(v float32) {
	o.Fee = &v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *OfferDTO) GetBlocked() bool {
	if o == nil || IsNil(o.Blocked) {
		var ret bool
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferDTO) GetBlockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *OfferDTO) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given bool and assigns it to the Blocked field.
func (o *OfferDTO) SetBlocked(v bool) {
	o.Blocked = &v
}

func (o OfferDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.FeedId) {
		toSerialize["feedId"] = o.FeedId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ShopCategoryId) {
		toSerialize["shopCategoryId"] = o.ShopCategoryId
	}
	if !IsNil(o.MarketCategoryId) {
		toSerialize["marketCategoryId"] = o.MarketCategoryId
	}
	if !IsNil(o.PreDiscountPrice) {
		toSerialize["preDiscountPrice"] = o.PreDiscountPrice
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.CutPrice) {
		toSerialize["cutPrice"] = o.CutPrice
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	toSerialize["modelId"] = o.ModelId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Bid) {
		toSerialize["bid"] = o.Bid
	}
	if !IsNil(o.Cbid) {
		toSerialize["cbid"] = o.Cbid
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	return toSerialize, nil
}

func (o *OfferDTO) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"modelId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOfferDTO := _OfferDTO{}

	err = json.Unmarshal(bytes, &varOfferDTO)

	if err != nil {
		return err
	}

	*o = OfferDTO(varOfferDTO)

	return err
}

type NullableOfferDTO struct {
	value *OfferDTO
	isSet bool
}

func (v NullableOfferDTO) Get() *OfferDTO {
	return v.value
}

func (v *NullableOfferDTO) Set(val *OfferDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferDTO(val *OfferDTO) *NullableOfferDTO {
	return &NullableOfferDTO{value: val, isSet: true}
}

func (v NullableOfferDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
	"fmt"
)

// ReturnDecisionSubreasonType Детали причин возврата:   * DO_NOT_FIT:     * USER_DID_NOT_LIKE — товар не понравился.     * USER_CHANGED_MIND — передумал покупать.     * DELIVERED_TOO_LONG — длительный срок доставки, поэтому передумал.    * BAD_QUALITY:     * BAD_PACKAGE — упаковка товара была нарушена     * DAMAGED — царапины, сколы.     * NOT_WORKING — не включается / не работает.     * INCOMPLETENESS — некомплект (не хватает детали в наборе, к товару).    * WRONG_ITEM:     * WRONG_ITEM — не тот товар.     * WRONG_COLOR — не соответствует по цвету.     * DID_NOT_MATCH_DESCRIPTION — не соответствует заявленным характеристикам/описанию. 
type ReturnDecisionSubreasonType string

// List of ReturnDecisionSubreasonType
const (
	USER_DID_NOT_LIKE ReturnDecisionSubreasonType = "USER_DID_NOT_LIKE"
	USER_CHANGED_MIND ReturnDecisionSubreasonType = "USER_CHANGED_MIND"
	DELIVERED_TOO_LONG ReturnDecisionSubreasonType = "DELIVERED_TOO_LONG"
	BAD_PACKAGE ReturnDecisionSubreasonType = "BAD_PACKAGE"
	DAMAGED ReturnDecisionSubreasonType = "DAMAGED"
	NOT_WORKING ReturnDecisionSubreasonType = "NOT_WORKING"
	INCOMPLETENESS ReturnDecisionSubreasonType = "INCOMPLETENESS"
	WRONG_ITEM ReturnDecisionSubreasonType = "WRONG_ITEM"
	WRONG_COLOR ReturnDecisionSubreasonType = "WRONG_COLOR"
	DID_NOT_MATCH_DESCRIPTION ReturnDecisionSubreasonType = "DID_NOT_MATCH_DESCRIPTION"
	UNKNOWN ReturnDecisionSubreasonType = "UNKNOWN"
)

// All allowed values of ReturnDecisionSubreasonType enum
var AllowedReturnDecisionSubreasonTypeEnumValues = []ReturnDecisionSubreasonType{
	"USER_DID_NOT_LIKE",
	"USER_CHANGED_MIND",
	"DELIVERED_TOO_LONG",
	"BAD_PACKAGE",
	"DAMAGED",
	"NOT_WORKING",
	"INCOMPLETENESS",
	"WRONG_ITEM",
	"WRONG_COLOR",
	"DID_NOT_MATCH_DESCRIPTION",
	"UNKNOWN",
}

func (v *ReturnDecisionSubreasonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnDecisionSubreasonType(value)
	for _, existing := range AllowedReturnDecisionSubreasonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnDecisionSubreasonType", value)
}

// NewReturnDecisionSubreasonTypeFromValue returns a pointer to a valid ReturnDecisionSubreasonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnDecisionSubreasonTypeFromValue(v string) (*ReturnDecisionSubreasonType, error) {
	ev := ReturnDecisionSubreasonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnDecisionSubreasonType: valid values are %v", v, AllowedReturnDecisionSubreasonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnDecisionSubreasonType) IsValid() bool {
	for _, existing := range AllowedReturnDecisionSubreasonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnDecisionSubreasonType value
func (v ReturnDecisionSubreasonType) Ptr() *ReturnDecisionSubreasonType {
	return &v
}

type NullableReturnDecisionSubreasonType struct {
	value *ReturnDecisionSubreasonType
	isSet bool
}

func (v NullableReturnDecisionSubreasonType) Get() *ReturnDecisionSubreasonType {
	return v.value
}

func (v *NullableReturnDecisionSubreasonType) Set(val *ReturnDecisionSubreasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnDecisionSubreasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnDecisionSubreasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnDecisionSubreasonType(val *ReturnDecisionSubreasonType) *NullableReturnDecisionSubreasonType {
	return &NullableReturnDecisionSubreasonType{value: val, isSet: true}
}

func (v NullableReturnDecisionSubreasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnDecisionSubreasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


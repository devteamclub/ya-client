/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
)

// checks if the OrderDeliveryDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderDeliveryDTO{}

// OrderDeliveryDTO Информация о доставке.
type OrderDeliveryDTO struct {
	// Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом `POST /cart`. 
	Id *string `json:"id,omitempty"`
	Type *OrderDeliveryType `json:"type,omitempty"`
	// Наименование службы доставки.
	ServiceName *string `json:"serviceName,omitempty"`
	// Стоимость доставки в валюте заказа.  Для отделения целой части от дробной используется точка. 
	Price *float32 `json:"price,omitempty"`
	DeliveryPartnerType *OrderDeliveryPartnerType `json:"deliveryPartnerType,omitempty"`
	Courier *OrderCourierDTO `json:"courier,omitempty"`
	Dates *OrderDeliveryDatesDTO `json:"dates,omitempty"`
	Region *RegionDTO `json:"region,omitempty"`
	Address *OrderDeliveryAddressDTO `json:"address,omitempty"`
	Vat *OrderVatType `json:"vat,omitempty"`
	// Идентификатор службы доставки.
	DeliveryServiceId *int64 `json:"deliveryServiceId,omitempty"`
	LiftType *OrderLiftType `json:"liftType,omitempty"`
	// Стоимость подъема на этаж.
	LiftPrice *float32 `json:"liftPrice,omitempty"`
	// Идентификатор пункта самовывоза, выбранного покупателем для получения заказа.  Идентификатор указывается:  * в личном кабинете магазина при создании или редактировании точки продаж.  Параметр указывается, если `type=PICKUP`. 
	OutletCode *string `json:"outletCode,omitempty"`
	// Формат даты: `ДД-ММ-ГГГГ`. 
	OutletStorageLimitDate *string `json:"outletStorageLimitDate,omitempty"`
	DispatchType *OrderDeliveryDispatchType `json:"dispatchType,omitempty"`
	// Информация для отслеживания перемещений посылки.
	Tracks []OrderTrackDTO `json:"tracks,omitempty"`
	// Информация о посылках.
	Shipments []OrderShipmentDTO `json:"shipments,omitempty"`
	// Приблизительная ли дата доставки.
	Estimated *bool `json:"estimated,omitempty"`
	EacType *OrderDeliveryEacType `json:"eacType,omitempty"`
	// Код подтверждения ЭАПП (для типа MERCHANT_TO_COURIER). 
	EacCode *string `json:"eacCode,omitempty"`
}

// NewOrderDeliveryDTO instantiates a new OrderDeliveryDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderDeliveryDTO() *OrderDeliveryDTO {
	this := OrderDeliveryDTO{}
	return &this
}

// NewOrderDeliveryDTOWithDefaults instantiates a new OrderDeliveryDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderDeliveryDTOWithDefaults() *OrderDeliveryDTO {
	this := OrderDeliveryDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrderDeliveryDTO) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetType() OrderDeliveryType {
	if o == nil || IsNil(o.Type) {
		var ret OrderDeliveryType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetTypeOk() (*OrderDeliveryType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given OrderDeliveryType and assigns it to the Type field.
func (o *OrderDeliveryDTO) SetType(v OrderDeliveryType) {
	o.Type = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *OrderDeliveryDTO) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *OrderDeliveryDTO) SetPrice(v float32) {
	o.Price = &v
}

// GetDeliveryPartnerType returns the DeliveryPartnerType field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetDeliveryPartnerType() OrderDeliveryPartnerType {
	if o == nil || IsNil(o.DeliveryPartnerType) {
		var ret OrderDeliveryPartnerType
		return ret
	}
	return *o.DeliveryPartnerType
}

// GetDeliveryPartnerTypeOk returns a tuple with the DeliveryPartnerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetDeliveryPartnerTypeOk() (*OrderDeliveryPartnerType, bool) {
	if o == nil || IsNil(o.DeliveryPartnerType) {
		return nil, false
	}
	return o.DeliveryPartnerType, true
}

// HasDeliveryPartnerType returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasDeliveryPartnerType() bool {
	if o != nil && !IsNil(o.DeliveryPartnerType) {
		return true
	}

	return false
}

// SetDeliveryPartnerType gets a reference to the given OrderDeliveryPartnerType and assigns it to the DeliveryPartnerType field.
func (o *OrderDeliveryDTO) SetDeliveryPartnerType(v OrderDeliveryPartnerType) {
	o.DeliveryPartnerType = &v
}

// GetCourier returns the Courier field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetCourier() OrderCourierDTO {
	if o == nil || IsNil(o.Courier) {
		var ret OrderCourierDTO
		return ret
	}
	return *o.Courier
}

// GetCourierOk returns a tuple with the Courier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetCourierOk() (*OrderCourierDTO, bool) {
	if o == nil || IsNil(o.Courier) {
		return nil, false
	}
	return o.Courier, true
}

// HasCourier returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasCourier() bool {
	if o != nil && !IsNil(o.Courier) {
		return true
	}

	return false
}

// SetCourier gets a reference to the given OrderCourierDTO and assigns it to the Courier field.
func (o *OrderDeliveryDTO) SetCourier(v OrderCourierDTO) {
	o.Courier = &v
}

// GetDates returns the Dates field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetDates() OrderDeliveryDatesDTO {
	if o == nil || IsNil(o.Dates) {
		var ret OrderDeliveryDatesDTO
		return ret
	}
	return *o.Dates
}

// GetDatesOk returns a tuple with the Dates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetDatesOk() (*OrderDeliveryDatesDTO, bool) {
	if o == nil || IsNil(o.Dates) {
		return nil, false
	}
	return o.Dates, true
}

// HasDates returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasDates() bool {
	if o != nil && !IsNil(o.Dates) {
		return true
	}

	return false
}

// SetDates gets a reference to the given OrderDeliveryDatesDTO and assigns it to the Dates field.
func (o *OrderDeliveryDTO) SetDates(v OrderDeliveryDatesDTO) {
	o.Dates = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetRegion() RegionDTO {
	if o == nil || IsNil(o.Region) {
		var ret RegionDTO
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetRegionOk() (*RegionDTO, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given RegionDTO and assigns it to the Region field.
func (o *OrderDeliveryDTO) SetRegion(v RegionDTO) {
	o.Region = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetAddress() OrderDeliveryAddressDTO {
	if o == nil || IsNil(o.Address) {
		var ret OrderDeliveryAddressDTO
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetAddressOk() (*OrderDeliveryAddressDTO, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given OrderDeliveryAddressDTO and assigns it to the Address field.
func (o *OrderDeliveryDTO) SetAddress(v OrderDeliveryAddressDTO) {
	o.Address = &v
}

// GetVat returns the Vat field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetVat() OrderVatType {
	if o == nil || IsNil(o.Vat) {
		var ret OrderVatType
		return ret
	}
	return *o.Vat
}

// GetVatOk returns a tuple with the Vat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetVatOk() (*OrderVatType, bool) {
	if o == nil || IsNil(o.Vat) {
		return nil, false
	}
	return o.Vat, true
}

// HasVat returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasVat() bool {
	if o != nil && !IsNil(o.Vat) {
		return true
	}

	return false
}

// SetVat gets a reference to the given OrderVatType and assigns it to the Vat field.
func (o *OrderDeliveryDTO) SetVat(v OrderVatType) {
	o.Vat = &v
}

// GetDeliveryServiceId returns the DeliveryServiceId field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetDeliveryServiceId() int64 {
	if o == nil || IsNil(o.DeliveryServiceId) {
		var ret int64
		return ret
	}
	return *o.DeliveryServiceId
}

// GetDeliveryServiceIdOk returns a tuple with the DeliveryServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetDeliveryServiceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DeliveryServiceId) {
		return nil, false
	}
	return o.DeliveryServiceId, true
}

// HasDeliveryServiceId returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasDeliveryServiceId() bool {
	if o != nil && !IsNil(o.DeliveryServiceId) {
		return true
	}

	return false
}

// SetDeliveryServiceId gets a reference to the given int64 and assigns it to the DeliveryServiceId field.
func (o *OrderDeliveryDTO) SetDeliveryServiceId(v int64) {
	o.DeliveryServiceId = &v
}

// GetLiftType returns the LiftType field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetLiftType() OrderLiftType {
	if o == nil || IsNil(o.LiftType) {
		var ret OrderLiftType
		return ret
	}
	return *o.LiftType
}

// GetLiftTypeOk returns a tuple with the LiftType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetLiftTypeOk() (*OrderLiftType, bool) {
	if o == nil || IsNil(o.LiftType) {
		return nil, false
	}
	return o.LiftType, true
}

// HasLiftType returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasLiftType() bool {
	if o != nil && !IsNil(o.LiftType) {
		return true
	}

	return false
}

// SetLiftType gets a reference to the given OrderLiftType and assigns it to the LiftType field.
func (o *OrderDeliveryDTO) SetLiftType(v OrderLiftType) {
	o.LiftType = &v
}

// GetLiftPrice returns the LiftPrice field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetLiftPrice() float32 {
	if o == nil || IsNil(o.LiftPrice) {
		var ret float32
		return ret
	}
	return *o.LiftPrice
}

// GetLiftPriceOk returns a tuple with the LiftPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetLiftPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.LiftPrice) {
		return nil, false
	}
	return o.LiftPrice, true
}

// HasLiftPrice returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasLiftPrice() bool {
	if o != nil && !IsNil(o.LiftPrice) {
		return true
	}

	return false
}

// SetLiftPrice gets a reference to the given float32 and assigns it to the LiftPrice field.
func (o *OrderDeliveryDTO) SetLiftPrice(v float32) {
	o.LiftPrice = &v
}

// GetOutletCode returns the OutletCode field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetOutletCode() string {
	if o == nil || IsNil(o.OutletCode) {
		var ret string
		return ret
	}
	return *o.OutletCode
}

// GetOutletCodeOk returns a tuple with the OutletCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetOutletCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OutletCode) {
		return nil, false
	}
	return o.OutletCode, true
}

// HasOutletCode returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasOutletCode() bool {
	if o != nil && !IsNil(o.OutletCode) {
		return true
	}

	return false
}

// SetOutletCode gets a reference to the given string and assigns it to the OutletCode field.
func (o *OrderDeliveryDTO) SetOutletCode(v string) {
	o.OutletCode = &v
}

// GetOutletStorageLimitDate returns the OutletStorageLimitDate field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetOutletStorageLimitDate() string {
	if o == nil || IsNil(o.OutletStorageLimitDate) {
		var ret string
		return ret
	}
	return *o.OutletStorageLimitDate
}

// GetOutletStorageLimitDateOk returns a tuple with the OutletStorageLimitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetOutletStorageLimitDateOk() (*string, bool) {
	if o == nil || IsNil(o.OutletStorageLimitDate) {
		return nil, false
	}
	return o.OutletStorageLimitDate, true
}

// HasOutletStorageLimitDate returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasOutletStorageLimitDate() bool {
	if o != nil && !IsNil(o.OutletStorageLimitDate) {
		return true
	}

	return false
}

// SetOutletStorageLimitDate gets a reference to the given string and assigns it to the OutletStorageLimitDate field.
func (o *OrderDeliveryDTO) SetOutletStorageLimitDate(v string) {
	o.OutletStorageLimitDate = &v
}

// GetDispatchType returns the DispatchType field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetDispatchType() OrderDeliveryDispatchType {
	if o == nil || IsNil(o.DispatchType) {
		var ret OrderDeliveryDispatchType
		return ret
	}
	return *o.DispatchType
}

// GetDispatchTypeOk returns a tuple with the DispatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetDispatchTypeOk() (*OrderDeliveryDispatchType, bool) {
	if o == nil || IsNil(o.DispatchType) {
		return nil, false
	}
	return o.DispatchType, true
}

// HasDispatchType returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasDispatchType() bool {
	if o != nil && !IsNil(o.DispatchType) {
		return true
	}

	return false
}

// SetDispatchType gets a reference to the given OrderDeliveryDispatchType and assigns it to the DispatchType field.
func (o *OrderDeliveryDTO) SetDispatchType(v OrderDeliveryDispatchType) {
	o.DispatchType = &v
}

// GetTracks returns the Tracks field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetTracks() []OrderTrackDTO {
	if o == nil || IsNil(o.Tracks) {
		var ret []OrderTrackDTO
		return ret
	}
	return o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetTracksOk() ([]OrderTrackDTO, bool) {
	if o == nil || IsNil(o.Tracks) {
		return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasTracks() bool {
	if o != nil && !IsNil(o.Tracks) {
		return true
	}

	return false
}

// SetTracks gets a reference to the given []OrderTrackDTO and assigns it to the Tracks field.
func (o *OrderDeliveryDTO) SetTracks(v []OrderTrackDTO) {
	o.Tracks = v
}

// GetShipments returns the Shipments field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetShipments() []OrderShipmentDTO {
	if o == nil || IsNil(o.Shipments) {
		var ret []OrderShipmentDTO
		return ret
	}
	return o.Shipments
}

// GetShipmentsOk returns a tuple with the Shipments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetShipmentsOk() ([]OrderShipmentDTO, bool) {
	if o == nil || IsNil(o.Shipments) {
		return nil, false
	}
	return o.Shipments, true
}

// HasShipments returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasShipments() bool {
	if o != nil && !IsNil(o.Shipments) {
		return true
	}

	return false
}

// SetShipments gets a reference to the given []OrderShipmentDTO and assigns it to the Shipments field.
func (o *OrderDeliveryDTO) SetShipments(v []OrderShipmentDTO) {
	o.Shipments = v
}

// GetEstimated returns the Estimated field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetEstimated() bool {
	if o == nil || IsNil(o.Estimated) {
		var ret bool
		return ret
	}
	return *o.Estimated
}

// GetEstimatedOk returns a tuple with the Estimated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetEstimatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Estimated) {
		return nil, false
	}
	return o.Estimated, true
}

// HasEstimated returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasEstimated() bool {
	if o != nil && !IsNil(o.Estimated) {
		return true
	}

	return false
}

// SetEstimated gets a reference to the given bool and assigns it to the Estimated field.
func (o *OrderDeliveryDTO) SetEstimated(v bool) {
	o.Estimated = &v
}

// GetEacType returns the EacType field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetEacType() OrderDeliveryEacType {
	if o == nil || IsNil(o.EacType) {
		var ret OrderDeliveryEacType
		return ret
	}
	return *o.EacType
}

// GetEacTypeOk returns a tuple with the EacType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetEacTypeOk() (*OrderDeliveryEacType, bool) {
	if o == nil || IsNil(o.EacType) {
		return nil, false
	}
	return o.EacType, true
}

// HasEacType returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasEacType() bool {
	if o != nil && !IsNil(o.EacType) {
		return true
	}

	return false
}

// SetEacType gets a reference to the given OrderDeliveryEacType and assigns it to the EacType field.
func (o *OrderDeliveryDTO) SetEacType(v OrderDeliveryEacType) {
	o.EacType = &v
}

// GetEacCode returns the EacCode field value if set, zero value otherwise.
func (o *OrderDeliveryDTO) GetEacCode() string {
	if o == nil || IsNil(o.EacCode) {
		var ret string
		return ret
	}
	return *o.EacCode
}

// GetEacCodeOk returns a tuple with the EacCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDeliveryDTO) GetEacCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EacCode) {
		return nil, false
	}
	return o.EacCode, true
}

// HasEacCode returns a boolean if a field has been set.
func (o *OrderDeliveryDTO) HasEacCode() bool {
	if o != nil && !IsNil(o.EacCode) {
		return true
	}

	return false
}

// SetEacCode gets a reference to the given string and assigns it to the EacCode field.
func (o *OrderDeliveryDTO) SetEacCode(v string) {
	o.EacCode = &v
}

func (o OrderDeliveryDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderDeliveryDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.DeliveryPartnerType) {
		toSerialize["deliveryPartnerType"] = o.DeliveryPartnerType
	}
	if !IsNil(o.Courier) {
		toSerialize["courier"] = o.Courier
	}
	if !IsNil(o.Dates) {
		toSerialize["dates"] = o.Dates
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Vat) {
		toSerialize["vat"] = o.Vat
	}
	if !IsNil(o.DeliveryServiceId) {
		toSerialize["deliveryServiceId"] = o.DeliveryServiceId
	}
	if !IsNil(o.LiftType) {
		toSerialize["liftType"] = o.LiftType
	}
	if !IsNil(o.LiftPrice) {
		toSerialize["liftPrice"] = o.LiftPrice
	}
	if !IsNil(o.OutletCode) {
		toSerialize["outletCode"] = o.OutletCode
	}
	if !IsNil(o.OutletStorageLimitDate) {
		toSerialize["outletStorageLimitDate"] = o.OutletStorageLimitDate
	}
	if !IsNil(o.DispatchType) {
		toSerialize["dispatchType"] = o.DispatchType
	}
	if !IsNil(o.Tracks) {
		toSerialize["tracks"] = o.Tracks
	}
	if !IsNil(o.Shipments) {
		toSerialize["shipments"] = o.Shipments
	}
	if !IsNil(o.Estimated) {
		toSerialize["estimated"] = o.Estimated
	}
	if !IsNil(o.EacType) {
		toSerialize["eacType"] = o.EacType
	}
	if !IsNil(o.EacCode) {
		toSerialize["eacCode"] = o.EacCode
	}
	return toSerialize, nil
}

type NullableOrderDeliveryDTO struct {
	value *OrderDeliveryDTO
	isSet bool
}

func (v NullableOrderDeliveryDTO) Get() *OrderDeliveryDTO {
	return v.value
}

func (v *NullableOrderDeliveryDTO) Set(val *OrderDeliveryDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDeliveryDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDeliveryDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDeliveryDTO(val *OrderDeliveryDTO) *NullableOrderDeliveryDTO {
	return &NullableOrderDeliveryDTO{value: val, isSet: true}
}

func (v NullableOrderDeliveryDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDeliveryDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



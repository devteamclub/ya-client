/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ya-client

import (
	"encoding/json"
	"time"
)

// checks if the FeedbackCommentDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedbackCommentDTO{}

// FeedbackCommentDTO Комментарий к отзыву на магазин.
type FeedbackCommentDTO struct {
	// Идентификатор ответа.
	Id *int64 `json:"id,omitempty"`
	// Идентификатор родительского ответа.
	ParentId *int64 `json:"parentId,omitempty"`
	// Текст ответа.
	Body *string `json:"body,omitempty"`
	// Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Author *FeedbackCommentAuthorDTO `json:"author,omitempty"`
	// Дочерние ответы.
	Children []FeedbackCommentDTO `json:"children,omitempty"`
}

// NewFeedbackCommentDTO instantiates a new FeedbackCommentDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackCommentDTO() *FeedbackCommentDTO {
	this := FeedbackCommentDTO{}
	return &this
}

// NewFeedbackCommentDTOWithDefaults instantiates a new FeedbackCommentDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackCommentDTOWithDefaults() *FeedbackCommentDTO {
	this := FeedbackCommentDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FeedbackCommentDTO) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackCommentDTO) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FeedbackCommentDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FeedbackCommentDTO) SetId(v int64) {
	o.Id = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *FeedbackCommentDTO) GetParentId() int64 {
	if o == nil || IsNil(o.ParentId) {
		var ret int64
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackCommentDTO) GetParentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *FeedbackCommentDTO) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int64 and assigns it to the ParentId field.
func (o *FeedbackCommentDTO) SetParentId(v int64) {
	o.ParentId = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *FeedbackCommentDTO) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackCommentDTO) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *FeedbackCommentDTO) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *FeedbackCommentDTO) SetBody(v string) {
	o.Body = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FeedbackCommentDTO) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackCommentDTO) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FeedbackCommentDTO) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *FeedbackCommentDTO) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FeedbackCommentDTO) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackCommentDTO) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FeedbackCommentDTO) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *FeedbackCommentDTO) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *FeedbackCommentDTO) GetAuthor() FeedbackCommentAuthorDTO {
	if o == nil || IsNil(o.Author) {
		var ret FeedbackCommentAuthorDTO
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackCommentDTO) GetAuthorOk() (*FeedbackCommentAuthorDTO, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *FeedbackCommentDTO) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given FeedbackCommentAuthorDTO and assigns it to the Author field.
func (o *FeedbackCommentDTO) SetAuthor(v FeedbackCommentAuthorDTO) {
	o.Author = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *FeedbackCommentDTO) GetChildren() []FeedbackCommentDTO {
	if o == nil || IsNil(o.Children) {
		var ret []FeedbackCommentDTO
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackCommentDTO) GetChildrenOk() ([]FeedbackCommentDTO, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *FeedbackCommentDTO) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []FeedbackCommentDTO and assigns it to the Children field.
func (o *FeedbackCommentDTO) SetChildren(v []FeedbackCommentDTO) {
	o.Children = v
}

func (o FeedbackCommentDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedbackCommentDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

type NullableFeedbackCommentDTO struct {
	value *FeedbackCommentDTO
	isSet bool
}

func (v NullableFeedbackCommentDTO) Get() *FeedbackCommentDTO {
	return v.value
}

func (v *NullableFeedbackCommentDTO) Set(val *FeedbackCommentDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackCommentDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackCommentDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackCommentDTO(val *FeedbackCommentDTO) *NullableFeedbackCommentDTO {
	return &NullableFeedbackCommentDTO{value: val, isSet: true}
}

func (v NullableFeedbackCommentDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackCommentDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



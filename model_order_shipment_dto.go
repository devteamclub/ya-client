/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OrderShipmentDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderShipmentDTO{}

// OrderShipmentDTO Список посылок.  В параметре может указываться несколько посылок. 
type OrderShipmentDTO struct {
	// Идентификатор посылки, присвоенный Маркетом.
	Id *int64 `json:"id,omitempty"`
	Status *OrderParcelStatusType `json:"status,omitempty"`
	// Формат даты: `ДД-ММ-ГГГГ`. 
	ShipmentDate *string `json:"shipmentDate,omitempty"`
	// Время, когда нужно отгрузить заказы службе доставки.  Формат времени: 24-часовой, `ЧЧ:ММ`.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
	ShipmentTime *string `json:"shipmentTime,omitempty"`
	// Информация для отслеживания перемещений посылки.
	Tracks []OrderTrackDTO `json:"tracks,omitempty"`
	// Список грузовых мест.
	Boxes []OrderParcelBoxDTO `json:"boxes,omitempty"`
}

// NewOrderShipmentDTO instantiates a new OrderShipmentDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderShipmentDTO() *OrderShipmentDTO {
	this := OrderShipmentDTO{}
	return &this
}

// NewOrderShipmentDTOWithDefaults instantiates a new OrderShipmentDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderShipmentDTOWithDefaults() *OrderShipmentDTO {
	this := OrderShipmentDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderShipmentDTO) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderShipmentDTO) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderShipmentDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *OrderShipmentDTO) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrderShipmentDTO) GetStatus() OrderParcelStatusType {
	if o == nil || IsNil(o.Status) {
		var ret OrderParcelStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderShipmentDTO) GetStatusOk() (*OrderParcelStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrderShipmentDTO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OrderParcelStatusType and assigns it to the Status field.
func (o *OrderShipmentDTO) SetStatus(v OrderParcelStatusType) {
	o.Status = &v
}

// GetShipmentDate returns the ShipmentDate field value if set, zero value otherwise.
func (o *OrderShipmentDTO) GetShipmentDate() string {
	if o == nil || IsNil(o.ShipmentDate) {
		var ret string
		return ret
	}
	return *o.ShipmentDate
}

// GetShipmentDateOk returns a tuple with the ShipmentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderShipmentDTO) GetShipmentDateOk() (*string, bool) {
	if o == nil || IsNil(o.ShipmentDate) {
		return nil, false
	}
	return o.ShipmentDate, true
}

// HasShipmentDate returns a boolean if a field has been set.
func (o *OrderShipmentDTO) HasShipmentDate() bool {
	if o != nil && !IsNil(o.ShipmentDate) {
		return true
	}

	return false
}

// SetShipmentDate gets a reference to the given string and assigns it to the ShipmentDate field.
func (o *OrderShipmentDTO) SetShipmentDate(v string) {
	o.ShipmentDate = &v
}

// GetShipmentTime returns the ShipmentTime field value if set, zero value otherwise.
func (o *OrderShipmentDTO) GetShipmentTime() string {
	if o == nil || IsNil(o.ShipmentTime) {
		var ret string
		return ret
	}
	return *o.ShipmentTime
}

// GetShipmentTimeOk returns a tuple with the ShipmentTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderShipmentDTO) GetShipmentTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ShipmentTime) {
		return nil, false
	}
	return o.ShipmentTime, true
}

// HasShipmentTime returns a boolean if a field has been set.
func (o *OrderShipmentDTO) HasShipmentTime() bool {
	if o != nil && !IsNil(o.ShipmentTime) {
		return true
	}

	return false
}

// SetShipmentTime gets a reference to the given string and assigns it to the ShipmentTime field.
func (o *OrderShipmentDTO) SetShipmentTime(v string) {
	o.ShipmentTime = &v
}

// GetTracks returns the Tracks field value if set, zero value otherwise.
func (o *OrderShipmentDTO) GetTracks() []OrderTrackDTO {
	if o == nil || IsNil(o.Tracks) {
		var ret []OrderTrackDTO
		return ret
	}
	return o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderShipmentDTO) GetTracksOk() ([]OrderTrackDTO, bool) {
	if o == nil || IsNil(o.Tracks) {
		return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *OrderShipmentDTO) HasTracks() bool {
	if o != nil && !IsNil(o.Tracks) {
		return true
	}

	return false
}

// SetTracks gets a reference to the given []OrderTrackDTO and assigns it to the Tracks field.
func (o *OrderShipmentDTO) SetTracks(v []OrderTrackDTO) {
	o.Tracks = v
}

// GetBoxes returns the Boxes field value if set, zero value otherwise.
func (o *OrderShipmentDTO) GetBoxes() []OrderParcelBoxDTO {
	if o == nil || IsNil(o.Boxes) {
		var ret []OrderParcelBoxDTO
		return ret
	}
	return o.Boxes
}

// GetBoxesOk returns a tuple with the Boxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderShipmentDTO) GetBoxesOk() ([]OrderParcelBoxDTO, bool) {
	if o == nil || IsNil(o.Boxes) {
		return nil, false
	}
	return o.Boxes, true
}

// HasBoxes returns a boolean if a field has been set.
func (o *OrderShipmentDTO) HasBoxes() bool {
	if o != nil && !IsNil(o.Boxes) {
		return true
	}

	return false
}

// SetBoxes gets a reference to the given []OrderParcelBoxDTO and assigns it to the Boxes field.
func (o *OrderShipmentDTO) SetBoxes(v []OrderParcelBoxDTO) {
	o.Boxes = v
}

func (o OrderShipmentDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderShipmentDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ShipmentDate) {
		toSerialize["shipmentDate"] = o.ShipmentDate
	}
	if !IsNil(o.ShipmentTime) {
		toSerialize["shipmentTime"] = o.ShipmentTime
	}
	if !IsNil(o.Tracks) {
		toSerialize["tracks"] = o.Tracks
	}
	if !IsNil(o.Boxes) {
		toSerialize["boxes"] = o.Boxes
	}
	return toSerialize, nil
}

type NullableOrderShipmentDTO struct {
	value *OrderShipmentDTO
	isSet bool
}

func (v NullableOrderShipmentDTO) Get() *OrderShipmentDTO {
	return v.value
}

func (v *NullableOrderShipmentDTO) Set(val *OrderShipmentDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderShipmentDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderShipmentDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderShipmentDTO(val *OrderShipmentDTO) *NullableOrderShipmentDTO {
	return &NullableOrderShipmentDTO{value: val, isSet: true}
}

func (v NullableOrderShipmentDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderShipmentDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


